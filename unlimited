local START_TIME = os.time()
local customnotifid = "10469938989"

local oldcustomnotifid = "4590657391"
function waitframes(ii) for i = 1, ii do task.wait() end end


local plr = game.Players.LocalPlayer
local char = plr.Character or plr.CharacterAdded:Wait()
local hum = char:FindFirstChildOfClass("Humanoid") or char:WaitForChild("Humanoid")
local LatestRoom = game:GetService("ReplicatedStorage").GameData.LatestRoom
local Players = game:GetService("Players")
local inRooms = false
local RequestFunction


local NotificationHolder = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Module.Lua"))()
local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Client.Lua"))()
function message(text)
	task.spawn(function()
		local notif = Instance.new("Sound");notif.Parent = game.SoundService;notif.SoundId = "rbxassetid://4590657391";notif.Volume = 3;notif:Play();notif.Stopped:Wait();notif:Destroy()
	end)
	task.spawn(function()
		local msg = Instance.new("Message",workspace)
		msg.Text = tostring(text)
		task.wait(5)
		msg:Destroy()
	end)
end
local currentver = "3.8"
if game.PlaceId == 6839171747 then



function normalmessage(title, text, reason, timee, image, textlabel, waitforinsttodelete)
	task.spawn(function()
		do
			local AchievementsFolder = require(game:GetService("ReplicatedStorage"):WaitForChild("Achievements"))
			if not game.Players.LocalPlayer.PlayerGui:FindFirstChild("MainUI") then
				repeat task.wait() until game.Players.LocalPlayer.PlayerGui:FindFirstChild("MainUI")
			end
			local MainUI =  game.Players.LocalPlayer.PlayerGui.MainUI
			local TweenService = game:GetService("TweenService")

			if title == nil or typeof(title) ~= "string" or string.len(title) == 0 then return end
			if text == nil or typeof(text) ~= "string" or string.len(text) == 0 then return end
			if reason == nil or typeof(reason) ~= "string" or string.len(reason) == 0 then reason = "" end
			if textlabel == nil or typeof(textlabel) ~= "string" then textlabel = "NOTIFICATION" end
			if timee == nil or timee == 0 or typeof(timee) ~= "number" then timee = 5 end
			if image == nil or typeof(image) ~= "string" then 
				image = "6023426923" 
			end

			local AchievementFrame = MainUI.AchievementsHolder.Achievement:Clone();
			AchievementFrame.Size = UDim2.new(0, 0, 0, 0);
			AchievementFrame.Frame.Position = UDim2.new(1.1, 0, 0, 0);
			AchievementFrame.Name = "LiveAchievement";
			AchievementFrame.Visible = true;

			AchievementFrame.Frame.TextLabel.Text = textlabel
			if textlabel == "WARNING" then AchievementFrame.Frame.TextLabel.TextColor3 = Color3.fromRGB(175, 0, 0);AchievementFrame.Frame.UIStroke.Color = Color3.fromRGB(175, 0, 0);AchievementFrame.Frame.Glow.ImageColor3 = Color3.fromRGB(175, 0, 0); end
			AchievementFrame.Frame.Details.Desc.Text = tostring(text)
			AchievementFrame.Frame.Details.Title.Text = tostring(title)
			AchievementFrame.Frame.Details.Reason.Text = tostring(reason or "")

			AchievementFrame.Frame.ImageLabel.Image = "rbxassetid://"..tostring(image or "0")

			AchievementFrame.Parent = MainUI.AchievementsHolder;
			AchievementFrame.Sound.SoundId = "rbxassetid://"..customnotifid
			if textlabel == "WARNING" then AchievementFrame.Sound.Volume = 2 else AchievementFrame.Sound.Volume = 1 end
			AchievementFrame.Sound:Play();
			if textlabel == "WARNING" then AchievementFrame:TweenSize(UDim2.new(1, 0, 0.2, 0), "In", "Quad", 0.3, true); else AchievementFrame:TweenSize(UDim2.new(1, 0, 0.2, 0), "In", "Quad", 0.8, true); end
			if textlabel == "WARNING" then wait(0.3) else wait(0.8) end
			AchievementFrame.Frame:TweenPosition(UDim2.new(0, 0, 0, 0), "Out", "Quad", 0.5, true);
			TweenService:Create(AchievementFrame.Frame.Glow, TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {
				ImageTransparency = 1
			}):Play()
			if waitforinsttodelete ~= nil and typeof(waitforinsttodelete) == "Instance" then
				waitforinsttodelete.Destroying:Wait()
			else
				wait(timee)
			end
			AchievementFrame.Frame:TweenPosition(UDim2.new(1.1, 0, 0, 0), "In", "Quad", 0.5, true)
			wait(0.5)
			AchievementFrame:TweenSize(UDim2.new(1, 0, -0.1, 0), "InOut", "Quad", 0.5, true)
			wait(0.5)
			AchievementFrame:Destroy()
		end
	end)
end
function warnmessage(title, text, reason, timee, image, waitforinsttodelete)
	normalmessage(title, text, reason, timee, image, "WARNING", waitforinsttodelete)
end

function confirmnotification(title, text, timee, callback)
	task.spawn(function()
		local notif = Instance.new("Sound");notif.Parent = game.SoundService;notif.SoundId = "rbxassetid://"..oldcustomnotifid;notif.Volume = 1;notif:Play();notif.Stopped:Wait();notif:Destroy()
	end)
	Notification:Notify(
		{Title = title, Description = text},
		{OutlineColor = Color3.fromRGB(80, 80, 80), Time = timee or 10, Type = "option"},
		{Image = "http://www.roblox.com/asset/?id=6023426923", ImageColor = Color3.fromRGB(255, 84, 84), Callback = callback or function(state)end}
	)
end

function oldnormalmessage(title, text, timee)
	task.spawn(function()
		local notif = Instance.new("Sound");notif.Parent = game.SoundService;notif.SoundId = "rbxassetid://"..oldcustomnotifid;notif.Volume = 1;notif:Play();notif.Stopped:Wait();notif:Destroy()
	end)
	Notification:Notify(
		{Title = title, Description = text},
		{OutlineColor = Color3.fromRGB(80, 80, 80),Time = timee or 5, Type = "default"}
	)
end 

function oldwarnmessage(title, text, timee)
	task.spawn(function()
		local notif = Instance.new("Sound");notif.Parent = game.SoundService;notif.SoundId = "rbxassetid://"..oldcustomnotifid;notif.Volume = 2;notif:Play();notif.Stopped:Wait();notif:Destroy()
	end)
	Notification:Notify(
		{Title = title, Description = text},
		{OutlineColor = Color3.fromRGB(80, 80, 80),Time = timee or 5, Type = "image"},
		{Image = "http://www.roblox.com/asset/?id=6023426923", ImageColor = Color3.fromRGB(255, 84, 84)}
	)
end
function randomString()local length = math.random(10,20);local array = {};for i = 1, length do array[i] = string.char(math.random(32, 126)) end;return table.concat(array);end

local PathModule = {}
local PathfindingService = game:GetService("PathfindingService")
local VisualizerFolder = game.Workspace:FindFirstChild("PDVisualizer")
if VisualizerFolder == nil then
	VisualizerFolder = Instance.new("Folder", workspace)
	VisualizerFolder.Name = "PDVisualizer"
end
VisualizerFolder:ClearAllChildren()

local VisualizeColors = {
	Normal = Color3.fromRGB(255, 139, 0),
	Jump = Color3.fromRGB(255, 0, 0),
	Finish = Color3.fromRGB(0, 255, 0)
}

function PathModule.visualize(waypoints, waypointSpacing)
	for _, waypoint in ipairs(waypoints) do
		local visualWaypointClone = Instance.new("Part")
		visualWaypointClone.Size = Vector3.new(0.3, 0.3, 0.3)
		visualWaypointClone.Anchored = true
		visualWaypointClone.CanCollide = false
		visualWaypointClone.Material = Enum.Material.Neon
		visualWaypointClone.Shape = Enum.PartType.Ball
		visualWaypointClone.Position = waypoint.Position + Vector3.new(0, 3, 0)
		visualWaypointClone.Color =
			(
				waypoint == waypoints[#waypoints] and VisualizeColors.Finish
				or (waypoint == waypoints[#waypoints-1] and VisualizeColors.Finish)
				or (waypoint == waypoints[#waypoints-2] and VisualizeColors.Finish)
				or (waypoint.Action == Enum.PathWaypointAction.Jump and VisualizeColors.Jump)
				or VisualizeColors.Normal
			)
		visualWaypointClone.Parent = VisualizerFolder
	end
end
function PathModule.new(char, goal, agentParameters, jumpingAllowed, offset)
	if not (char and char:IsA("Model") and char.PrimaryPart) then return end
	if not PathfindingService then PathfindingService = game:GetService("PathfindingService") end 

	local Path = PathfindingService:CreatePath(agentParameters or {})
	local HRP = char:FindFirstChild("HumanoidRootPart")
	local Humanoid = char:FindFirstChildWhichIsA("Humanoid")

	if not HRP then HRP = char.PrimaryPart end
	if jumpingAllowed == nil or typeof(jumpingAllowed) ~= "boolean" then jumpingAllowed = false end

	local waypoints

	pcall(function() HRP:SetNetworkOwner(nil) end)

	local Success, ErrorMessage = pcall(function()
		if offset then
			Path:ComputeAsync(HRP.Position - offset, goal)
		else
			Path:ComputeAsync(HRP.Position, goal)
		end
	end)

	if Success and Path.Status == Enum.PathStatus.Success then 
		waypoints = Path:GetWaypoints()
		PathModule.visualize(waypoints)

		for i, v in pairs(waypoints) do
			if MAXEDLOADED == false or not v then return end

			if char.HumanoidRootPart.Anchored == false then
				if jumpingAllowed == true then if v.Action == Enum.PathWaypointAction.Jump then Humanoid:ChangeState(Enum.HumanoidStateType.Jumping) end end
				Humanoid:MoveTo(v.Position)
				Humanoid.MoveToFinished:Wait()
			end
		end

		VisualizerFolder:ClearAllChildren()
		return true
	else
		return false
	end
end

local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Rayfield/main/source'))()

local currentver = "3.8"
local gui_data = nil
local s,e = pcall(function()
	gui_data = game:HttpGet(("https://raw.githubusercontent.com/GambolOfficial/sddd/main/gui_data.json"), true)
	gui_data = game:GetService("HttpService"):JSONDecode(gui_data)
end)
if e then
	oldwarnmessage("MAXED v"..currentver, "Failed to get script data.", 10)
end

if MAXEDLOADED == true then warnmessage("MAXED v"..currentver, "GUI already loaded!", "", 10) return end
if game.PlaceId ~= 6839171747 and game.PlaceId ~= 6516141723 then 
	oldwarnmessage("MAXED v"..currentver, "You need to join DOORS to run this script.", 10) 
	return
end
if gui_data ~= nil then
	if currentver ~= gui_data.ver or gui_data.ver ~= currentver then
		warnmessage("MAXED v"..currentver, "You are using an outdated version of this script", "Loading latest version.", 10) 
		loadstring(game:HttpGet((gui_data.loadstring.."?" .. tostring(math.random(0, 9999999)) ),true))()
		return
	else
		currentver = tostring(gui_data.ver)
	end
end
pcall(function() getgenv().MAXEDLOADED = true end)
normalmessage("MAXED v"..currentver, "Loading script...", "", 2)
if gui_data ~= nil then
	oldnormalmessage("INFO", gui_data.changelog, 20)
end



	
 	-- Window	
	local Window = Rayfield:CreateWindow({
		Name = "Maxed",
		LoadingTitle = "Doors Script",
		LoadingSubtitle = "by Gambol",
		ConfigurationSaving = {
			Enabled = true,
			FolderName = "Maxed Hub", -- Create a custom folder for your hub/game
			FileName = "Maxed Hub"
		},
		Discord = {
			Enabled = false,
			Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD.
			RememberJoins = true -- Set this to false to make them join the discord every time they load it up
		},
		KeySystem = false, -- Set this to true to use our key system
		KeySettings = {
			Title = "Maxed Hub",
			Subtitle = "Key System",
			Note = "Dm Gambol with the word (among us) to recieve the key.",
			FileName = "Gambol Key",
			SaveKey = true,
			GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
			Key = "PPNFMNAWLZVWAQCZMKYVJCZALSDSSXQDFAR"
		}
	})
	
	-- Tabs
	local MainTab = Window:CreateTab("Main", 4483362458) -- Title, Image

	local ToolsTab = Window:CreateTab("Tools", 4483362458) -- Title, Image

	local ScriptsTab = Window:CreateTab("Scripts", 4483362458) -- Title, Image

	local CharTab = Window:CreateTab("Character", 4483362458) -- Title, Image
	
	local RoomsTab = Window:CreateTab("The Rooms", 4483362458)

	local ConfigTab = Window:CreateTab("Configs", 4483362458) -- Title, Image	
	
	
	-- Flags 
	local flags = {
		-- general
		light = false,
		fullbright = false,
		instapp = false,
		noseek = false,
		nogates = false,
		nopuzzle = false,
		noa90 = false,
		noskeledoors = false,
		noscreech = false,
		notimothy = false,
		getcode = false,
		roomsnolock = false,
		heartbeatwin = false,
		noseekarmsfire = false,
		avoidrushambush = false,
		autoplayagain = false,
		anticheatbypass = false,
		noclip = false, --fly = false
		autoskiprooms = false,
		camfov = 70,
		speed = 0,
		walkspeedtoggle = false,
		camfovtoggle = false,
		autopulllever = false,
		customnotifid = "10469938989",
		oldcustomnotifid = "4590657391",
		noeyesdamage = false,

		-- esp
		espdoors = false,
		espkeys = false,
		espitems = false,
		espbooks = false,
		esprush = false,
		espchest = false,
		esplocker = false,
		esphumans = false,
		espgold = false,
		goldespvalue = 0,
		--fakeespdoors = false,
		tracers = false,

		-- notifiers
		hintrush = false,
		predictentities = false,

		-- auras
		draweraura = false,
		keyaura = false,
		breakercollecter = false,
		bookcollecter = false,

		-- auto a-1000
		autorooms = false,
		autorooms_debug = false,
		autorooms_blockcontrols = false,

		-- trolling
		dropdowntrolling = "None"
	}
	local buttons = {
		-- general
		light = nil,
		fullbright = nil,
		instapp = nil,
		noseek = nil,
		nogates = nil,
		nopuzzle = nil,
		noa90 = nil,
		noskeledoors = nil,
		noscreech = nil,
		notimothy = nil,
		getcode = nil,
		roomsnolock = nil,
		heartbeatwin = nil,
		noseekarmsfire = nil,
		avoidrushambush = nil,
		autoplayagain = nil,
		anticheatbypass = nil,
		noclip = nil, --fly = false
		autoskiprooms = nil,
		camfov = nil,
		speed = nil,
		walkspeedtoggle = nil,
		camfovtoggle = nil,
		autopulllever = nil,
		customnotifid = nil,
		oldcustomnotifid = nil,
		noeyesdamage = nil,

		-- esp
		espdoors = nil,
		espkeys = nil,
		espitems = nil,
		espbooks = nil,
		esprush = nil,
		espchest = nil,
		esplocker = nil,
		esphumans = nil,
		espgold = nil,
		goldespvalue = nil,
		--fakeespdoors = nil,
		tracers = nil,

		-- notifiers
		hintrush = nil,
		predictentities = nil,

		-- auras
		draweraura = nil,
		keyaura = nil,
		breakercollecter = nil,
		bookcollecter = nil,

		-- auto a-1000
		autorooms = nil,
		autorooms_debug = nil,
		autorooms_blockcontrols = nil,

		-- trolling
		dropdowntrolling = nil
	}
	customnotifid = flags.customnotifid
	
	local DELFLAGS = {table.unpack(flags)}
	local esptable = {doors={},keys={},items={},books={},entity={},chests={},lockers={},people={},gold={},fakedoors={}}
	local function changeBrightness(color)
		local h, s, v = color:ToHSV()
		return Color3.fromHSV(h, s, v/2)
	end

	local GlobalESPFolder = game.CoreGui:FindFirstChild("ESPFolder")
	if GlobalESPFolder == nil then
		GlobalESPFolder = Instance.new("Folder", game.CoreGui)
		GlobalESPFolder.Name = "ESPFolder"
	end
	local esptableinstances = {}
	local Camera = workspace.CurrentCamera
	local WorldToViewportPoint = Camera.WorldToViewportPoint
	local WorldToViewport = function(...) return WorldToViewportPoint(Camera, ...) end
	function TracerESP(Color, instance)
		if Drawing then
			local Tracer = Drawing.new("Line")
			Tracer.Visible = false
			Tracer.Color = Color
			Tracer.Thickness = 2
			Tracer.Transparency = 1

			local con = game:GetService("RunService").RenderStepped:Connect(function()
				if instance ~= nil and flags.tracers == true then		
					local ScreenPosition, Vis = WorldToViewport(instance.Position);
					local OPos = Camera.CFrame:pointToObjectSpace(instance.Position);
					if ScreenPosition.Z < 0 then
						local AT = math.atan2(OPos.Y, OPos.X) + math.pi;
						OPos = CFrame.Angles(0, 0, AT):vectorToWorldSpace((CFrame.Angles(0, math.rad(89.9), 0):vectorToWorldSpace(Vector3.new(0, 0, -1))));
					end
					local Position = WorldToViewport(Camera.CFrame:pointToWorldSpace(OPos));
					if Vis then
						local TracerPosition = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 1)
						Tracer.Visible = true
						Tracer.From = TracerPosition
						Tracer.To = Vector2.new(Position.X, Position.Y)
					else
						Tracer.Visible = false
					end
				else
					Tracer.Visible = false
				end
			end)

			local ret = {}
			ret.delete = function()
				task.spawn(function()
					if con then con:Disconnect() end
					Tracer:Remove()
				end)
			end

			instance.Destroying:Connect(function() ret.delete() end)
			return ret
		else
			local ret = {}
			ret.delete = function() end
			return ret
		end
	end
	function esp(what,color,core,name)
		local parts

		local esp_folder = GlobalESPFolder:FindFirstChild(name)
		if game.Players:FindFirstChild(name) then
			esp_folder = GlobalESPFolder:FindFirstChild("PlayerESP")
			if not esp_folder then
				esp_folder = Instance.new("Folder")
				esp_folder.Parent = GlobalESPFolder
				esp_folder.Name = "PlayerESP"
			end
		end
		if not esp_folder then
			esp_folder = Instance.new("Folder")
			esp_folder.Parent = GlobalESPFolder
			esp_folder.Name = name
		end

		if typeof(what) == "Instance" then
			if what:IsA("Model") then
				parts = what:GetChildren()
			elseif what:IsA("BasePart") then
				parts = {what,table.unpack(what:GetChildren())}
			end
		elseif typeof(what) == "table" then
			parts = what
		end

		local bill
		local boxes = {}

		local s,e = pcall(function()
			if typeof(parts) ~= "table" then parts = {parts} end

			for i,v in pairs(parts) do
				if typeof(v) == "table" then
					for ii,vv in pairs(v) do
						if vv:IsA("BasePart") then
							local box = Instance.new("BoxHandleAdornment")
							box.Size = v.Size
							box.AlwaysOnTop = true
							box.ZIndex = 1
							box.AdornCullingMode = Enum.AdornCullingMode.Never
							box.Color3 = color
							box.Transparency = 0.7
							box.Adornee = v
							box.Parent = esp_folder

							table.insert(boxes, box)

							task.spawn(function()
								box.Adornee.Destroying:Connect(function()
									box.Adornee = nil
									box.Visible = false
									box:Destroy()
								end)
								--while box do
								--	if box.Adornee == nil or not box.Adornee:IsDescendantOf(workspace) then
								--		box.Adornee = nil
								--		box.Visible = false
								--		box:Destroy()
								--	end  
								--	task.wait()
								--end
							end)
						end
					end
				else
					if v:IsA("BasePart") then
						local box = Instance.new("BoxHandleAdornment")
						box.Size = v.Size
						box.AlwaysOnTop = true
						box.ZIndex = 1
						box.AdornCullingMode = Enum.AdornCullingMode.Never
						box.Color3 = color
						box.Transparency = 0.7
						box.Adornee = v
						box.Parent = esp_folder

						table.insert(boxes, box)

						task.spawn(function()
							box.Adornee.Destroying:Connect(function()
								box.Adornee = nil
								box.Visible = false
								box:Destroy()
							end)
							--while box do
							--	if box.Adornee == nil or not box.Adornee:IsDescendantOf(workspace) then
							----		box.Adornee = nil
							--		box.Visible = false
							--		box:Destroy()
							--	end  
							--	task.wait()
							--end
						end)
					end
				end
			end
		end)

		if e then
			warn(e)
			print("box esp failed")
		end

		if core and name then
			bill = Instance.new("BillboardGui", esp_folder)
			bill.AlwaysOnTop = true
			bill.Size = UDim2.new(0,400,0,100)
			bill.Adornee = core
			bill.MaxDistance = 2000

			local mid = Instance.new("Frame",bill)
			mid.AnchorPoint = Vector2.new(0.5,0.5)
			mid.BackgroundColor3 = color
			mid.Size = UDim2.new(0,8,0,8)
			mid.Position = UDim2.new(0.5,0,0.5,0)
			Instance.new("UICorner",mid).CornerRadius = UDim.new(1,0)
			Instance.new("UIStroke",mid)

			local txt = Instance.new("TextLabel",bill)
			txt.AnchorPoint = Vector2.new(0.5,0.5)
			txt.BackgroundTransparency = 1
			txt.BackgroundColor3 = color
			txt.TextColor3 = color
			txt.Size = UDim2.new(1,0,0,20)
			txt.Position = UDim2.new(0.5,0,0.7,0)
			txt.Text = name
			Instance.new("UIStroke",txt)

			task.spawn(function()
				bill.Adornee.Destroying:Connect(function()
					bill.Enabled = false
					bill.Adornee = nil
					--pcall(function() table.remove(boxes, table.find(boxes, bill)) end)
					bill:Destroy() 
				end)
				--while bill do
				--	if bill.Adornee == nil or not bill.Adornee:IsDescendantOf(workspace) then
				--		bill.Enabled = false
				--		bill.Adornee = nil
				--		--pcall(function() table.remove(boxes, table.find(boxes, bill)) end)
				--		bill:Destroy() 
				--	end  
				--	task.wait()
				--end
			end)
		end

		local Tracer = nil
		if flags.tracers == true then Tracer = TracerESP(color, core) end

		local ret = {}
		ret.delete = function()
			task.spawn(function()
				for i,v in pairs(boxes) do
					pcall(function()
						table.remove(esptableinstances, table.find(esptableinstances, v.Adornee))
					end)
					pcall(function()
						table.remove(esptableinstances, table.find(esptableinstances, v.Parent))
					end)
					v.Adornee = nil
					v.Visible = false
					v:Destroy()
					task.wait()
				end
			end)

			if bill then
				pcall(function()
					table.remove(esptableinstances, table.find(esptableinstances, bill.Adornee))
				end)
				pcall(function()
					table.remove(esptableinstances, table.find(esptableinstances, bill.Parent))
				end)
				bill.Adornee = nil
				bill.Enabled = false
				bill:Destroy() 
			end

			if Tracer then Tracer.delete() end
		end

		return ret 
	end
		
	-- Sections
	local Section = MainTab:CreateSection("Player")	
	
	-- Toggles	
	
	-- Client Glow
	local clientglowbtn = MainTab:CreateToggle({
		Name = "Client Glow",
		CurrentValue = false,
		Flag = "light", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.light = val

			if val then
				local l = Instance.new("PointLight")
				l.Range = 10000
				l.Brightness = 2
				l.Parent = char.PrimaryPart

				repeat task.wait() until MAXEDLOADED == false or not flags.light
				l:Destroy() 
			end
		end,
	})
	buttons.light = clientglowbtn
	
	-- Fullbright
	
	local cfullbrightbtn = MainTab:CreateToggle({
		Name = "Fullbright",
		CurrentValue = false,
		Flag = "fbe", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.fullbright = val

			if val then
				local oldAmbient = game:GetService("Lighting").Ambient
				local oldColorShift_Bottom = game:GetService("Lighting").ColorShift_Bottom
				local oldColorShift_Top = game:GetService("Lighting").ColorShift_Top

				local function doFullbright()
					if flags.fullbright == true then
						game:GetService("Lighting").Ambient = Color3.new(1, 1, 1)
						game:GetService("Lighting").ColorShift_Bottom = Color3.new(1, 1, 1)
						game:GetService("Lighting").ColorShift_Top = Color3.new(1, 1, 1)
					else
						game:GetService("Lighting").Ambient = oldAmbient
						game:GetService("Lighting").ColorShift_Bottom = oldColorShift_Bottom
						game:GetService("Lighting").ColorShift_Top = oldColorShift_Top
					end
				end
				doFullbright()

				local coneee = game:GetService("Lighting").LightingChanged:Connect(doFullbright)
			repeat task.wait() until MAXEDLOADED == false or not flags.fullbright

				coneee:Disconnect()
				game:GetService("Lighting").Ambient = oldAmbient
				game:GetService("Lighting").ColorShift_Bottom = oldColorShift_Bottom
				game:GetService("Lighting").ColorShift_Top = oldColorShift_Top
			end
		end,
	})
	buttons.fullbright = cfullbrightbtn
	
	-- Instant use
	if fireproximityprompt then
		local instausebrn = MainTab:CreateToggle({
			Name = "Instant Use",
			CurrentValue = false,
			Flag = "Iou", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
			Callback = function(val, oldval)
				flags.instapp = val

				local holdconnect
				holdconnect = game:GetService("ProximityPromptService").PromptButtonHoldBegan:Connect(function(p)
					fireproximityprompt(p)
				end)

			repeat task.wait() until MAXEDLOADED == false or not flags.instapp
				holdconnect:Disconnect()
			end,
		})
		buttons.instapp = instausebrn
	else
		Rayfield:Notify({
			Title = "Maxed",
			Content = "You need to have fireproximityprompt function for 'instant use",
			Duration = 6.5,
			Image = 4483362458,
		})
	end
	
	-- Sliders
	
	-- Fullbright 
	local walkspeedslider = MainTab:CreateSlider({
		Name = "WalkSpeed",
		Range = {16, 22},
		Increment = 1,
		Suffix = "WalkSpeed",
		CurrentValue = 16,
		Flag = "Wsp", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.speed = val
			if flags.walkspeedtoggle == true then
				hum.WalkSpeed = val
			end
		end,
	})
	-- Toggle Walkspeed
	local walkspeedtglbtn = MainTab:CreateToggle({
		Name = "Toggle Walkspeed",
		CurrentValue = false,
		Flag = "wspe", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.walkspeedtoggle = val
			if not val then
				hum.WalkSpeed = 16
			end
		end,
	})
	buttons.walkspeedtoggle = walkspeedtglbtn
	
		MainTab:CreateButton({
		Name = "Reset Character",
		Callback = function()
			Rayfield:Notify({
				Title = "Reset Character?",
				Content = "Are you sure you want to reset your character?",
				Duration = 6.5,
				Image = 4483362458,
				Actions = { -- Notification Buttons
					mhm = {
						Name = "Yes",
						Callback = function()
							game.Players.LocalPlayer.Character.Humanoid.Health = 0
						end
					},
					nah = {
						Name = "No",
						Callback = function()
							print("Canceled Reset character ")
						end
					},
				},
			})
		end,
	})
	
	local camfovslider = MainTab:CreateSlider({
		Name = "FOV",
		Range = {50, 120},
		Increment = 1,
		Suffix = "FOV",
		CurrentValue = 70,
		Flag = "Fove", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.camfov = val
		end,
	})
	buttons.camfov = camfovslider
	local togglefovbrn = MainTab:CreateToggle({
		Name = "Toggle FOV",
		CurrentValue = false,
		Flag = "Fov12e3", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val ,oldval)
			flags.camfovtoggle = val
			if not val then


				waitframes(2)
				game:GetService("Workspace").CurrentCamera.FieldOfView = 70
			end
		end,
	})
	buttons.camfovtoggle = togglefovbrn
	
	task.spawn(function()
		game:GetService("RunService").RenderStepped:Connect(function()
			if flags.walkspeedtoggle == true then
				if hum.WalkSpeed < flags.speed then
					hum.WalkSpeed = flags.speed
				end
			end
			if flags.camfovtoggle == true then
				if flags.tracers == false then
					pcall(function()
						game:GetService("Workspace").CurrentCamera.FieldOfView = flags.camfov
					end)
				else
					if syn or PROTOSMASHER_LOADED then
						pcall(function()
							game:GetService("Workspace").CurrentCamera.FieldOfView = flags.camfov
						end)
					end
				end
			end
		end)
	end)
	
	local Section = MainTab:CreateSection("Esp")	
	
		MainTab:CreateButton({
		Name = "Clear ESP",
		Callback = function()
			pcall(function()
				for _,e in pairs(esptable) do
					for _,v in pairs(e) do
						pcall(function()
							v.delete()
						end)
					end
				end
			end)
			GlobalESPFolder:ClearAllChildren()
		end,
	})
	
	if Drawing then
		if not syn or not PROTOSMASHER_LOADED then
			local Label = MainTab:CreateLabel("Tracers only work with 70 FOV.")
		end
		local traceresp = MainTab:CreateToggle({
			Name = "Tracers",
			CurrentValue = false,
			Flag = "Tracers", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
			Callback = function(val, oldval)
				flags.tracers = val
			end,
		})

		buttons.tracers = traceresp
	end
	
	local espdoorsbtn = MainTab:CreateToggle({
		Name = "Doors ESP",
		CurrentValue = false,
		Flag = "espdoor", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.espdoors = val

			if val then
				local function setup(room)
					task.wait(.1)
					local door = room:WaitForChild("Door"):WaitForChild("Door")

					if table.find(esptableinstances, door) then
						return
					end

					task.wait(0.1)
					local h = esp(door,Color3.fromRGB(255,240,0),door,"Door")
					table.insert(esptable.doors,h)
					table.insert(esptableinstances, door)

					door:WaitForChild("Open").Played:Connect(function()
						h.delete()
					end)

					door.AncestryChanged:Connect(function()
						h.delete()
					end)
				end

				local addconnect
				addconnect = workspace.CurrentRooms.ChildAdded:Connect(function(room)
					setup(room)
				end)

				for i,room in pairs(workspace.CurrentRooms:GetChildren()) do
					if room:FindFirstChild("Assets") then
						setup(room) 
					end
					task.wait()
				end

				if workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:FindFirstChild("Assets") then
					setup(workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)])
				end

			repeat task.wait() until MAXEDLOADED == false or not flags.espdoors
				addconnect:Disconnect()

				for i,v in pairs(esptable.doors) do
					v.delete()
				end 
			end
		end,
	})
	buttons.espdoors = espdoorsbtn
	
	local espkeysbtn = MainTab:CreateToggle({
		Name = "Key/Lever ESP",
		CurrentValue = false,
		Flag = "espkey", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.espkeys = val

			if val then
				local function check(v, room)
					task.wait()
					if table.find(esptableinstances, v) then
						return
					end

					if v:IsA("Model") then
						if v.Name == "ElectricalKeyObtain" then
							local hitbox = v:FindFirstChild("Hitbox")
							local parts = hitbox:GetChildren()
							table.remove(parts,table.find(parts,v:WaitForChild("PromptHitbox")))

							local h = esp(parts,Color3.fromRGB(90,255,40),hitbox,"Electrical Key")
							table.insert(esptable.keys,h)
							table.insert(esptableinstances, v)
						end
						if v.Name == "KeyObtain" then
							local hitbox = v:FindFirstChild("Hitbox")
							local parts = hitbox:GetChildren()
							table.remove(parts,table.find(parts,hitbox:WaitForChild("PromptHitbox")))

							local h = esp(parts,Color3.fromRGB(90,255,40),hitbox,"Key")
							table.insert(esptable.keys,h)
							table.insert(esptableinstances, v)
						end;if v.Name == "LeverForGate" then
							local h = esp(v,Color3.fromRGB(90,255,40),v.PrimaryPart,"Lever")
							table.insert(esptable.keys,h)
							table.insert(esptableinstances, v)
							v.PrimaryPart:WaitForChild("SoundToPlay").Played:Connect(function()
								h.delete()
							end) 
						end
					end
				end

				local function setup(room)
					local assets = room:FindFirstChild("Assets")

					if room then
						if assets then
							assets.DescendantAdded:Connect(function(v)
								check(v, room) 
							end)
						else
							room.DescendantAdded:Connect(function(v)
								check(v, room) 
							end)
						end
					end

					if assets then
						for i,v in pairs(assets:GetChildren()) do --:GetDescendants()) do
							check(v, room)
						end 
					else
						for i,v in pairs(room:GetDescendants()) do
							check(v, room)
						end 
					end
				end

				local addconnect
				addconnect = workspace.CurrentRooms.ChildAdded:Connect(function(room)
					setup(room)
				end)

				for i,room in pairs(workspace.CurrentRooms:GetChildren()) do
					setup(room)
				end

				setup(workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)])

			repeat task.wait() until MAXEDLOADED == false or not flags.espkeys
				addconnect:Disconnect()

				for i,v in pairs(esptable.keys) do
					v.delete()
				end 
			end
		end,
	})
	buttons.espkeys = espkeysbtn
	
	local espitemsbtn = MainTab:CreateToggle({
		Name = "Item ESP",
		CurrentValue = false,
		Flag = "espitem", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.espitems = val

			if val then
				local function check(v)
					if table.find(esptableinstances, v) then
						return
					end

					if v:IsA("Model") and (v:GetAttribute("Pickup") or v:GetAttribute("PropType")) then
						task.wait(0.1)

						local part = (v:FindFirstChild("Handle") or v:FindFirstChild("Prop"))
						local h = esp(part,Color3.fromRGB(160,190,255),part,v.Name)
						table.insert(esptable.items,h)
						table.insert(esptableinstances, v)				
					end
				end

				local function setup(room)
					task.wait(.1)
					local assets = room:WaitForChild("Assets")

					if assets then  
						local subaddcon
						subaddcon = assets.DescendantAdded:Connect(function(v)
							check(v) 
						end)

						for i,v in pairs(assets:GetDescendants()) do
							check(v)
						end

						task.spawn(function()
						repeat task.wait() until MAXEDLOADED == false or not flags.espitems
							subaddcon:Disconnect()  
						end) 
					end 
				end

				local addconnect
				addconnect = workspace.CurrentRooms.ChildAdded:Connect(function(room)
					setup(room)
				end)

				for i,room in pairs(workspace.CurrentRooms:GetChildren()) do
					if room:FindFirstChild("Assets") then
						setup(room) 
					end
					task.wait()
				end

				if workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:FindFirstChild("Assets") then
					setup(workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)])
				end

			repeat task.wait() until MAXEDLOADED == false or  not flags.espitems
				addconnect:Disconnect()

				for i,v in pairs(esptable.items) do
					v.delete()
				end 
			end
		end,
	})
	buttons.espitems = espitemsbtn
	
	local espbooksbtn = MainTab:CreateToggle({
		Name = "Book/Breaker ESP",
		CurrentValue = false,
		Flag = "espbook", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.espbooks = val

			if val then
				local function check(v,room)
					if table.find(esptableinstances, v) then
						return
					end

					if v:IsA("Model") and (v.Name == "LiveHintBook" or v.Name == "LiveBreakerPolePickup") then
						task.wait(0.1)
						local h
						if v.Name == "LiveHintBook" then
							h = esp(v,Color3.fromRGB(160,190,255),v.PrimaryPart,"Book")
						elseif v.Name == "LiveBreakerPolePickup" then
							h = esp(v,Color3.fromRGB(160,190,255),v.PrimaryPart,"Breaker")
						end

						table.insert(esptable.books,h)
						table.insert(esptableinstances, v)

						v.AncestryChanged:Connect(function()
							if not v:IsDescendantOf(room) then
								h.delete() 
							end
						end)
					end
				end

				local function setup(room)
					task.wait(.1)
					if room.Name == "50" or room.Name == "100" then
						room.DescendantAdded:Connect(function(v)
							check(v,room) 
						end)

						for i,v in pairs(room:GetDescendants()) do
							check(v,room)
						end
					end
				end

				local addconnect
				addconnect = workspace.CurrentRooms.ChildAdded:Connect(function(room)
					setup(room)
				end)

				for i,room in pairs(workspace.CurrentRooms:GetChildren()) do
					setup(room) 
					task.wait()
				end

				if workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:FindFirstChild("Assets") then
					setup(workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)])
				end

			repeat task.wait() until MAXEDLOADED == false or not flags.espbooks
				addconnect:Disconnect()

				for i,v in pairs(esptable.books) do
					v.delete()
				end 
			end
		end,
	})
	buttons.espbooks = espbooksbtn
	local entitynames = {"RushMoving","AmbushMoving","Eyes","Snare","A60","A120"}

	local esprusbtn = MainTab:CreateToggle({
		Name = "Entity ESP",
		CurrentValue = false,
		Flag = "esprush1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.esprush = val

			if val then
				local addconnect
				addconnect = workspace.ChildAdded:Connect(function(v)
					if table.find(entitynames,v.Name) then
						task.wait(.1)
						local h = esp(v,Color3.fromRGB(255,25,25),v.PrimaryPart,v.Name:gsub("Moving",""))
						table.insert(esptable.entity,h)
					end
				end)

				for _,v in pairs(workspace:GetChildren()) do
					if table.find(entitynames,v.Name) then
						task.wait(.1)
						local h = esp(v,Color3.fromRGB(255,25,25),v.PrimaryPart,v.Name:gsub("Moving",""))
						table.insert(esptable.entity,h)
					end
				end

				local function setup(room)
					task.wait()
					if room.Name == "50" or room.Name == "100" then
						local figuresetup = room:WaitForChild("FigureSetup")

						if figuresetup then
							local fig = figuresetup:WaitForChild("FigureRagdoll")
							task.wait(0.1)

							local h = esp(fig,Color3.fromRGB(255,25,25),fig.PrimaryPart,"Figure")
							table.insert(esptable.entity,h)
						end 
					else
						local assets = room:WaitForChild("Assets")

						local function check(v)
							if v:IsA("Model") and table.find(entitynames,v.Name) then
								task.wait(0.1)

								local h = esp(v:WaitForChild("Base"),Color3.fromRGB(255,25,25),v.Base,"Snare")
								table.insert(esptable.entity,h)
							end
						end

						assets.DescendantAdded:Connect(function(v)
							check(v) 
						end)

						for i,v in pairs(assets:GetDescendants()) do
							check(v)
						end
					end 
				end

				local roomconnect
				roomconnect = workspace.CurrentRooms.ChildAdded:Connect(function(room)
					setup(room)
				end)

				for i,v in pairs(workspace.CurrentRooms:GetChildren()) do
					setup(v) 
				end

				setup(workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)])

			repeat task.wait() until MAXEDLOADED == false or not flags.esprush
				addconnect:Disconnect()
				roomconnect:Disconnect()

				for i,v in pairs(esptable.entity) do
					v.delete()
				end 
			end
		end,
	})
	buttons.esprush = esprusbtn
	
	local esplockerbrn = MainTab:CreateToggle({
		Name = "Wardrobe/Locker ESP",
		CurrentValue = false,
		Flag = "esplocker", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.esplocker = val

			if val then
				local function check(v, room)
					task.wait()
					--local okvaluechange = nil
					if v.Name == "Wardrobe" then
						local h = esp(v.PrimaryPart,Color3.fromRGB(145,100,25),v.PrimaryPart,"Closet")
						table.insert(esptable.lockers,h) 
						table.insert(esptableinstances, v)
						--okvaluechange = game:GetService("ReplicatedStorage").GameData.LatestRoom:GetPropertyChangedSignal("Value"):Connect(function()
						--	if tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value) ~= room.Name then
						--		h.delete()
						--		okvaluechange:Disconnect()
						--	end
						--end)
					elseif v.Name == "Rooms_Locker" or v.Name == "Rooms_Locker_Fridge" then
						local h = esp(v.PrimaryPart,Color3.fromRGB(145,100,25),v.PrimaryPart,"Locker")
						table.insert(esptable.lockers,h) 
						table.insert(esptableinstances, v)
						--okvaluechange = game:GetService("ReplicatedStorage").GameData.LatestRoom:GetPropertyChangedSignal("Value"):Connect(function()
						--	if tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value) ~= room.Name then
						--		h.delete()
						--		okvaluechange:Disconnect()
						--	end
						--end)
					end
				end

				local function setup(room)
					local assets = room:WaitForChild("Assets")

					if assets then
						local subaddcon
						subaddcon = assets.DescendantAdded:Connect(function(v)
							check(v, room) 
						end)

						for i,v in pairs(assets:GetDescendants()) do
							check(v, room)
						end

						task.spawn(function()
						repeat task.wait() until MAXEDLOADED == false or not flags.esplocker
							subaddcon:Disconnect()  
						end)
					else
						local subaddcon
						subaddcon = room.DescendantAdded:Connect(function(v)
							check(v, room) 
						end)

						for i,v in pairs(room:GetDescendants()) do
							check(v, room)
						end

						task.spawn(function()
						repeat task.wait() until MAXEDLOADED == false or not flags.esplocker
							subaddcon:Disconnect()  
						end) 
					end
				end

				local addconnect
				addconnect = workspace.CurrentRooms.ChildAdded:Connect(function(room)
					setup(room)
				end)

				if workspace.CurrentRooms:FindFirstChild(tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value-1)) then
					setup(workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value-1)])
				end
				setup(workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)])
				if workspace.CurrentRooms:FindFirstChild(tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value+1)) then
					setup(workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value+1)])
				end

			repeat task.wait() until  MAXEDLOADED == false or not flags.esplocker
				addconnect:Disconnect()

				for i,v in pairs(esptable.lockers) do
					v.delete()
				end 
			end
		end,
	})
	
	buttons.esplocker = esplockerbrn
	
	local espchesbtn = MainTab:CreateToggle({
		Name = "Chest ESP",
		CurrentValue = false,
		Flag = "Chestesp", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.espchest = val

			if val then
				local function check(v, room)
					task.wait()
					if table.find(esptableinstances, v) then
						return
					end

					if v:IsA("Model") then
						local okvaluechange = nil
						if v.Name == "ChestBox" then
							warn(v.Name)
							local h = esp(v,Color3.fromRGB(205,120,255),v.PrimaryPart,"Chest")
							table.insert(esptable.chests,h) 
							table.insert(esptableinstances, v)
							okvaluechange = game:GetService("ReplicatedStorage").GameData.LatestRoom:GetPropertyChangedSignal("Value"):Connect(function()
								if tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value) ~= room.Name then
									h.delete()
									okvaluechange:Disconnect()
								end
							end)
						elseif v.Name == "ChestBoxLocked" then
							local h = esp(v,Color3.fromRGB(255,120,205),v.PrimaryPart,"Locked Chest")
							table.insert(esptable.chests,h) 
							table.insert(esptableinstances, v)
							okvaluechange = game:GetService("ReplicatedStorage").GameData.LatestRoom:GetPropertyChangedSignal("Value"):Connect(function()
								if tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value) ~= room.Name then
									h.delete()
									okvaluechange:Disconnect()
								end
							end)
						end
					end
				end

				local function setup(room)
					task.wait(.1)
					local subaddcon
					subaddcon = room.DescendantAdded:Connect(function(v)
						check(v, room) 
					end)

					for i,v in pairs(room:GetDescendants()) do
						check(v, room)
					end

					task.spawn(function()
					repeat task.wait() until MAXEDLOADED == false or not flags.espchest
						subaddcon:Disconnect()  
					end)  
				end

				local addconnect
				addconnect = workspace.CurrentRooms.ChildAdded:Connect(function(room)
					setup(room)
				end)

				for i,room in pairs(workspace.CurrentRooms:GetChildren()) do
					if room:FindFirstChild("Assets") then
						setup(room) 
					end
					task.wait()
				end

				if workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:FindFirstChild("Assets") then
					setup(workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)])
				end

			repeat task.wait() until MAXEDLOADED == false or not flags.espchest
				addconnect:Disconnect()

				for i,v in pairs(esptable.chests) do
					v.delete()
				end
			end
		end,
	})
	buttons.espchest = espchesbtn
	
	local esphumansbtn = MainTab:CreateToggle({
		Name = "Player ESP",
		CurrentValue = false,
		Flag = "playeresp", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.esphumans = val

			if val then
				local function personesp(v)
					if v:IsA("Player") then
						v.CharacterAdded:Connect(function(vc)
							local vh = vc:WaitForChild("Humanoid")
							local torso = vc:WaitForChild("UpperTorso")
							task.wait(0.1)

							local h = esp(vc,Color3.fromRGB(255,255,255),torso,v.DisplayName)
							table.insert(esptable.people,h) 
						end)

						if v.Character then
							local vc = v.Character
							local vh = vc:WaitForChild("Humanoid")
							local torso = vc:WaitForChild("UpperTorso")
							task.wait(0.1)

							local h = esp(vc,Color3.fromRGB(255,255,255),torso,v.DisplayName)
							table.insert(esptable.people,h) 
						end
					end
				end

				local addconnect
				addconnect = game.Players.PlayerAdded:Connect(function(v)
					if v ~= plr then
						personesp(v)
					end
				end)

				for i,v in pairs(game.Players:GetPlayers()) do
					if v ~= plr then
						personesp(v) 
					end
					task.wait()
				end

				if workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:FindFirstChild("Assets") then
					personesp(workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)])
				end

			repeat task.wait() until MAXEDLOADED == false or not flags.esphumans
				addconnect:Disconnect()

				for i,v in pairs(esptable.people) do
					v.delete()
				end 
			end
		end,
	})
	buttons.esphumans = esphumansbtn
	
	local espgoldbtn = MainTab:CreateToggle({
		Name = "Gold ESP",
		CurrentValue = false,
		Flag = "goldesp", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.espgold = val

			if val then
				local function check(v)
					if table.find(esptableinstances, v) then
						return
					end

					if v:IsA("Model") then
						task.wait(0.1)
						local goldvalue = v:GetAttribute("GoldValue")

						if goldvalue and goldvalue >= (flags.goldespvalue or 5) then
							local hitbox = v:WaitForChild("Hitbox")
							local h = esp(hitbox:GetChildren(),Color3.fromRGB(255,255,0),hitbox,"GoldPile [".. tostring(goldvalue).."]")
							table.insert(esptable.gold,h)
							table.insert(esptableinstances, v)
						end
					end
				end

				local function setup(room)
					task.wait(.1)
					local assets = room:WaitForChild("Assets")

					local subaddcon
					subaddcon = assets.DescendantAdded:Connect(function(v)
						check(v) 
					end)

					for i,v in pairs(assets:GetDescendants()) do
						check(v)
						task.wait()
					end

					task.spawn(function()
					repeat task.wait() until MAXEDLOADED == false or not flags.espchest
						subaddcon:Disconnect()  
					end)  
				end

				local addconnect
				addconnect = workspace.CurrentRooms.ChildAdded:Connect(function(room)
					setup(room)
				end)

				for i,room in pairs(workspace.CurrentRooms:GetChildren()) do
					if room:FindFirstChild("Assets") then
						setup(room) 
					end
					task.wait()
				end

				if workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:FindFirstChild("Assets") then
					setup(workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)])
				end

			repeat task.wait() until MAXEDLOADED == false or not flags.espgold
				addconnect:Disconnect()

				for i,v in pairs(esptable.gold) do
					v.delete()
				end 
			end
		end,
	})
	
	buttons.espgold = espgoldbtn
	
	local goldespvaluebtn = MainTab:CreateSlider({
		Name = "Minimum Gold for Gold ESP",
		Range = {5, 150},
		Increment = 1,
		Suffix = "Gold",
		CurrentValue = 5,
		Flag = "goldslider", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.goldespvalue = val
		end,
	})
	buttons.goldespvalue = goldespvaluebtn

	local Section = MainTab:CreateSection("Entities")
	
	local hintrushbtn = MainTab:CreateToggle({
		Name = "Notify Entities",
		CurrentValue = false,
		Flag = "entities", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.hintrush = val

		end,
	})
	buttons.hintrush = hintrushbtn
	
	local predictentitiesbtn = MainTab:CreateToggle({
		Name = "Event Prediction",
		CurrentValue = false,
		Flag = "predictentities", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.predictentities = val
		end,
	})
	buttons.predictentities = predictentitiesbtn
	game:GetService("ReplicatedStorage").GameData.LatestRoom.Changed:Connect(function(value)
		if flags.predictentities == true then
			local ChaseStartVal = game:GetService("ReplicatedStorage").GameData.ChaseStart.Value - value;
			if ((0 < ChaseStartVal) and (ChaseStartVal < 4)) then
				oldwarnmessage("EVENT PREDICTION", "There can be an event in or after Room "..tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value + ChaseStartVal).."!", 10)
			end
		end
	end)

	local noeyesdamagebtn = MainTab:CreateToggle({
		Name = "No Eyes Damage",
		CurrentValue = false,
		Flag = "Noeyes", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.noeyesdamage = val

		end,
	})
	buttons.noeyesdamage = noeyesdamagebtn
	
	local noseekbtn = MainTab:CreateToggle({
		Name = "Disable Seek chase",
		CurrentValue = false,
		Flag = "noseek", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.noseek = val

			if val then
				local addconnect
				addconnect = workspace.CurrentRooms.ChildAdded:Connect(function(room)
					local trigger = room:WaitForChild("TriggerEventCollision",2)

					if trigger then
						trigger:Destroy() 
					end
				end)

			repeat task.wait() until MAXEDLOADED == false or not flags.noseek
				addconnect:Disconnect()
			end
		end,
	})
	buttons.noseek = noseekbtn
	
	local ScreechModule = plr.PlayerGui.MainUI.Initiator.Main_Game.RemoteListener.Modules:FindFirstChild("Screech")
	
	local noscreechbtn = MainTab:CreateToggle({
		Name = "Harmless Screech",
		CurrentValue = false,
		Flag = "noscreech", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.noscreech = val

			if val then
				if not ScreechModule then ScreechModule = plr.PlayerGui.MainUI.Initiator.Main_Game.RemoteListener.Modules:FindFirstChild("Screech") end
				ScreechModule.Parent = nil
			else
				ScreechModule.Parent = plr.PlayerGui.MainUI.Initiator.Main_Game.RemoteListener.Modules
			end
		end,
	})
	buttons.noscreech = noscreechbtn
	
	local Toggle = MainTab:CreateToggle({
		Name = "No Timothy (Spider) Jumpscare",
		CurrentValue = false,
		Flag = "Nospider", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.notimothy = val

			if val then
				if not SpiderJumpscareModule then SpiderJumpscareModule = plr.PlayerGui.MainUI.Initiator.Main_Game.RemoteListener.Modules:FindFirstChild("SpiderJumpscare") end
				SpiderJumpscareModule.Parent = nil
			else
				SpiderJumpscareModule.Parent = plr.PlayerGui.MainUI.Initiator.Main_Game.RemoteListener.Modules
			end
		end,
	})
	buttons.notimothy = notimothybtn
	
	if hookmetamethod and newcclosure and getnamecallmethod then
		local Label = MainTab:CreateLabel("Do not click when playing the heartbeat minigame if you have'always win heartbeat' on!")
		
		local heartbeatwinbtn = MainTab:CreateToggle({
			Name = "Always win Heartbeat minigame",
			CurrentValue = false,
			Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
			Callback = function(val, oldval)
				flags.heartbeatwin = val
			end,
		})
		buttons.heartbeatwin = heartbeatwinbtn
		
		local old
		old = hookmetamethod(game,"__namecall",newcclosure(function(self,...)
			local args = {...}
			local method = getnamecallmethod()

			if tostring(self) == 'ClutchHeartbeat' and method == "FireServer" and flags.heartbeatwin == true then
				args[2] = true
				return old(self,unpack(args))
			end

			return old(self,...)
		end))
	else
		warnmessage("Maxed v"..currentver, "You need to have hookmetamethod and newcclosure and getnamecallmethod functions for 'always win heartbeat'.", 7)
	end
	

	
	-- DropDown
	
	
	-- Buttons

	-- Scripts [
	
	-- Client Glow
	
	
	
	local eyesspawned = false
	workspace.ChildAdded:Connect(function(inst)
		task.spawn(function()
			if table.find(entitynames, inst.Name) and flags.hintrush == true then
				if inRooms == true then
					if inst.Name:gsub("Moving","") == "A60" then
						warnmessage("ENTITIES", inst.Name:gsub("Moving","").." is coming.", "Hide!", 0, "12350986086", inst)
					elseif inst.Name:gsub("Moving","") == "A120" then
						warnmessage("ENTITIES", inst.Name:gsub("Moving","").." is coming.", "Hide!", 0, "12351008553", inst)
					else
						task.wait(.1)
						if plr:DistanceFromCharacter(inst:GetPivot().Position) < 400 and inst:IsDescendantOf(workspace) then
							warnmessage("ENTITIES", inst.Name:gsub("Moving","").." is coming.", "Hide!", 0, "0", inst)
						end
					end
				else
					--if flags.avoidrushambush == false then
					repeat task.wait() until plr:DistanceFromCharacter(inst:GetPivot().Position) < 400 or not inst:IsDescendantOf(workspace)

					if inst:IsDescendantOf(workspace) then
						if inst.Name:gsub("Moving","") == "Rush" then
							warnmessage("ENTITIES", inst.Name:gsub("Moving","").." is coming.", "Hide!", 0, "11102256553", inst)
						elseif inst.Name:gsub("Moving","") == "Ambush" then
							warnmessage("ENTITIES", inst.Name:gsub("Moving","").." is coming.", "Hide!", 0, "10938726652", inst)
						elseif inst.Name:gsub("Moving","") == "Eyes" then
							task.spawn(function()
								if flags.noeyesdamage == true then
									eyesspawned = true
									local con = game:GetService("RunService").RenderStepped:Connect(function()
										eyesspawned = true
										local legrot = 0
										local bodypitch = 85 -- legit -65
										local bodyrot = 0
										game:GetService("ReplicatedStorage").EntityInfo.MotorReplication:FireServer(legrot, bodypitch, bodyrot, false)
									end)
									inst.Destroying:Wait()
									con:Disconnect()
									eyesspawned = false
								end
							end)
							warnmessage("ENTITIES", inst.Name:gsub("Moving","").." spawned.", "Don't look at it!", 10, "10865377903")
						else
							warnmessage("ENTITIES", inst.Name:gsub("Moving","").." is coming.", "Hide!", 0, "0", inst)
						end
						--inst.Destroying:Wait()
						--warnmessage("ENTITIES", "It's now completely safe to leave the hiding spot.", 7)
						--	end
					end
				end
			end
		end)
			--[[if flags.avoidrushambush == true then
		if inst.Name == "RushMoving" or inst.Name == "AmbushMoving" then
			repeat task.wait() until plr:DistanceFromCharacter(inst:GetPivot().Position) < 400 or not inst:IsDescendantOf(workspace)

			if inst:IsDescendantOf(workspace) then
				if inst.Name:gsub("Moving","") == "Rush" then
					warnmessage("ENTITIES", "Avoiding "..inst.Name:gsub("Moving",""), "Please wait...", 0, "11102256553", inst)
				elseif inst.Name:gsub("Moving","") == "Ambush" then
					warnmessage("ENTITIES", "Avoiding "..inst.Name:gsub("Moving",""), "Please wait...", 0, "10938726652", inst)
				else
					warnmessage("ENTITIES", "Avoiding "..inst.Name:gsub("Moving",""), "Please wait...", 0, "0", inst)
				end

				local OldPos = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
				local oldwalkspeed = hum.WalkSpeed
				
				local pos = CFrame.new(
					OldPos + Vector3.new(
						0,
						avoidingYvalue,
						0
					) 
				)
				
				local function getrecentroom(index)
					local rooms = workspace.CurrentRooms:GetChildren() 
					table.sort(rooms,function(a,b)
						return tonumber(a.Name) > tonumber(b.Name) 
					end)

					return rooms[index]
				end
				local room = getrecentroom(2)
				local door = room:WaitForChild("Door")

				local CFrameValue = Instance.new("CFrameValue")
				CFrameValue.Value = game.Players.LocalPlayer.Character:GetPivot()
				CFrameValue:GetPropertyChangedSignal("Value"):connect(function()
					--game.Players.LocalPlayer.Character:PivotTo(CFrameValue.Value)
					game.Players.LocalPlayer.Character.Collision.CFrame = CFrameValue.Value
				end)
				local tween = game:GetService("TweenService"):Create(CFrameValue, TweenInfo.new(1.5), {
					Value = pos
				})
				tween:Play()

				local con
				tween.Completed:connect(function()
					CFrameValue:Destroy() 
					con = game:GetService("RunService").RenderStepped:Connect(function()
						--game.Players.LocalPlayer.Character:PivotTo(pos)
						game.Players.LocalPlayer.Character.Collision.CFrame = pos
					end)
				end)

				inst.Destroying:Wait()
				con:Disconnect()

				local CFrameValue = Instance.new("CFrameValue")
				CFrameValue.Value = game.Players.LocalPlayer.Character:GetPivot()
				CFrameValue:GetPropertyChangedSignal("Value"):connect(function()
					game.Players.LocalPlayer.Character:PivotTo(CFrameValue.Value)
				end)
				local tween = game:GetService("TweenService"):Create(CFrameValue, TweenInfo.new(1.5), {Value = CFrame.new(OldPos)})
				tween:Play()
				tween.Completed:connect(function()
					CFrameValue:Destroy() 
					--game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = false
				end)
			end
		end
	end--]]
	end)
	local Section = MainTab:CreateSection("Rooms (DOORS)")
	local noseekarmsfirebtn = MainTab:CreateToggle({
		Name = "No Seek Arms & Fire",
		CurrentValue = false,
		Flag = "nofire", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.noseekarmsfire = val
		end,
	})
	game:GetService("ReplicatedStorage").GameData.LatestRoom:GetPropertyChangedSignal("Value"):Connect(function()
		task.wait(.1)
		for _,descendant in pairs(game:GetService("Workspace").CurrentRooms:GetDescendants()) do
			if descendant.Name == "Seek_Arm" or descendant.Name == "ChandelierObstruction" then
				descendant.Parent = nil
				descendant:Destroy()
			end
		end
	end)
	buttons.noseekarmsfire = noseekarmsfirebtn
	
	local Label = MainTab:CreateLabel("Press this only if you have the\nbreaker box minigame on.")
	local Section = MainTab:CreateSection("Interactables")
	if fireproximityprompt then
		local draweraurabtn = MainTab:CreateToggle({
			Name = "Loot Aura",
			CurrentValue = false,
			Flag = "Lootura", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
			Callback = function(val, oldval)
				flags.draweraura = val

				if val then
					local function setup(room)
						local function check(v)
							task.wait()
							if v:IsA("Model") then
								--	if v.PrimaryPart then
								task.wait()
								if v.Name == "DrawerContainer" or v.Name == "RolltopContainer" then
									if v.Name == "RolltopContainer" then
										local prompt = v:WaitForChild("ActivateEventPrompt")
										local interactions = prompt:GetAttribute("Interactions")

										if not interactions then
											task.spawn(function()
												repeat task.wait(0.1)
													--pcall(function()
													local posok = false
													pcall(function()
														local posoks, posoke = pcall(function()
															posok = (plr:DistanceFromCharacter(v.PrimaryPart.Position) <= 12)
														end)
														if posoke then
															local part
															for _,v in pairs(v:GetChildren()) do
																local hasProperty = pcall(function() local t = v["Position"] end)
																if hasProperty then
																	part = v
																	break
																end
															end
															posok = (plr:DistanceFromCharacter(part.Position) <= 12)
														end
													end)
													if posok then
														fireproximityprompt(prompt)
													end
													--end)
												until prompt:GetAttribute("Interactions") or not flags.draweraura
											end)
										end
									else
										local knob = v:WaitForChild("Knobs")

										if knob then
											local prompt = knob:WaitForChild("ActivateEventPrompt")
											local interactions = prompt:GetAttribute("Interactions")

											if not interactions then
												task.spawn(function()
													repeat task.wait(0.1)
														--pcall(function()
														local posok = false
														pcall(function()
															local posoks, posoke = pcall(function()
																posok = (plr:DistanceFromCharacter(v.PrimaryPart.Position) <= 12)
															end)
															if posoke then
																local part
																for _,v in pairs(v:GetChildren()) do
																	local hasProperty = pcall(function() local t = v["Position"] end)
																	if hasProperty then
																		part = v
																		break
																	end
																end
																posok = (plr:DistanceFromCharacter(part.Position) <= 12)
															end
														end)
														if posok then
															fireproximityprompt(prompt)
														end
														--end)
													until prompt:GetAttribute("Interactions") or not flags.draweraura
												end)
											end
										end
									end
								elseif v.Name == "KeyObtain" or v.Name == "ElectricalKeyObtain" then
									local prompt = v:WaitForChild("ModulePrompt")
									local interactions = prompt:GetAttribute("Interactions")

									if not interactions then
										task.spawn(function()
											repeat task.wait(0.1)
												--pcall(function()
												local posok = false
												pcall(function()
													local posoks, posoke = pcall(function()
														posok = (plr:DistanceFromCharacter(v.PrimaryPart.Position) <= 12)
													end)
													if posoke then
														local part
														for _,v in pairs(v:GetChildren()) do
															local hasProperty = pcall(function() local t = v["Position"] end)
															if hasProperty then
																part = v
																break
															end
														end
														posok = (plr:DistanceFromCharacter(part.Position) <= 12)
													end
												end)
												if posok then
													fireproximityprompt(prompt) 
												end
												--end)
											until prompt:GetAttribute("Interactions") or not flags.draweraura
										end)
									end
								elseif v.Name == "Green_Herb" then
									local plant = v:WaitForChild("Plant")

									if plant then
										local prompt = plant:WaitForChild("HerbPrompt")
										local okcanckl = 0
										task.spawn(function()
											repeat task.wait(0.1)
												--pcall(function()
												local posok = false
												pcall(function()
													local posoks, posoke = pcall(function()
														posok = (plr:DistanceFromCharacter(v.PrimaryPart.Position) <= 12)
													end)
													if posoke then
														local part
														for _,v in pairs(v:GetChildren()) do
															local hasProperty = pcall(function() local t = v["Position"] end)
															if hasProperty then
																part = v
																break
															end
														end
														posok = (plr:DistanceFromCharacter(part.Position) <= 12)
													end
												end)
												if posok then
													fireproximityprompt(prompt) 
													okcanckl += 1
												end 
												--end)
											until prompt:GetAttribute("Interactions") or not flags.draweraura or okcanckl > 35
										end)
									end
								elseif v.Name == "PickupItem" then
									if game:GetService("ReplicatedStorage").GameData.LatestRoom.Value == 51 or game:GetService("ReplicatedStorage").GameData.LatestRoom.Value == 52 then
										return
									end

									local prompt = v:WaitForChild("ModulePrompt")
									local okcanckl = 0
									task.spawn(function()
										repeat task.wait(0.1)
											--pcall(function()
											local posok = false
											pcall(function()
												local posoks, posoke = pcall(function()
													posok = (plr:DistanceFromCharacter(v.PrimaryPart.Position) <= 12)
												end)
												if posoke then
													local part
													for _,v in pairs(v:GetChildren()) do
														local hasProperty = pcall(function() local t = v["Position"] end)
														if hasProperty then
															part = v
															break
														end
													end
													posok = (plr:DistanceFromCharacter(part.Position) <= 12)
												end
											end)
											if posok then
												fireproximityprompt(prompt) 
												okcanckl += 1
											end
											--end)
										until not v:IsDescendantOf(workspace) or not prompt:IsDescendantOf(workspace) or not flags.draweraura or okcanckl > 20
									end)
								elseif v:GetAttribute("Pickup") or v:GetAttribute("PropType") then
									if game:GetService("ReplicatedStorage").GameData.LatestRoom.Value == 51 or game:GetService("ReplicatedStorage").GameData.LatestRoom.Value == 52 then
										return
									end

									local prompt = v:WaitForChild("ModulePrompt", 2)
									if prompt == nil then
										prompt = v:FindFirstChildWhichIsA("ProximityPrompt")
										if prompt == nil then
											for _,vvvvv in pairs(v:GetDescendants()) do
												if vvvvv:IsA("ProximityPrompt") then
													prompt = vvvvv
													break
												end
											end
										end
									end

									task.spawn(function()
										repeat task.wait(0.1)
											--pcall(function()
											local posok = false
											pcall(function()
												local posoks, posoke = pcall(function()
													posok = (plr:DistanceFromCharacter(v.PrimaryPart.Position) <= 12)
												end)
												if posoke then
													local part
													for _,v in pairs(v:GetChildren()) do
														local hasProperty = pcall(function() local t = v["Position"] end)
														if hasProperty then
															part = v
															break
														end
													end
													posok = (plr:DistanceFromCharacter(part.Position) <= 12)
												end
											end)
											if posok then
												fireproximityprompt(prompt) 
											end
											--end)
										until not v:IsDescendantOf(workspace) or not prompt:IsDescendantOf(workspace) or not flags.draweraura
									end)
								elseif v.Name == "GoldPile" then
									local prompt = v:WaitForChild("LootPrompt")
									local interactions = prompt:GetAttribute("Interactions")

									if not interactions then
										task.spawn(function()
											repeat task.wait(0.1)
												--pcall(function()
												local posok = false
												pcall(function()
													local posoks, posoke = pcall(function()
														posok = (plr:DistanceFromCharacter(v.PrimaryPart.Position) <= 12)
													end)
													if posoke then
														local part
														for _,v in pairs(v:GetChildren()) do
															local hasProperty = pcall(function() local t = v["Position"] end)
															if hasProperty then
																part = v
																break
															end
														end
														posok = (plr:DistanceFromCharacter(part.Position) <= 12)
													end
												end)
												if posok then
													fireproximityprompt(prompt) 
												end 
												--end)
											until prompt:GetAttribute("Interactions") or not flags.draweraura
										end)
									end
								elseif v.Name:sub(1,8) == "ChestBox" then
									local prompt = v:WaitForChild("ActivateEventPrompt")
									local interactions = prompt:GetAttribute("Interactions")

									if not interactions then
										task.spawn(function()
											repeat task.wait(0.1)
												--pcall(function()
												local posok = false
												pcall(function()
													local posoks, posoke = pcall(function()
														posok = (plr:DistanceFromCharacter(v.PrimaryPart.Position) <= 12)
													end)
													if posoke then
														local part
														for _,v in pairs(v:GetChildren()) do
															local hasProperty = pcall(function() local t = v["Position"] end)
															if hasProperty then
																part = v
																break
															end
														end
														posok = (plr:DistanceFromCharacter(part.Position) <= 12)
													end
												end)
												if posok then
													fireproximityprompt(prompt)
												end
												--end)
											until prompt:GetAttribute("Interactions") or not flags.draweraura
										end)
									end
								elseif v.Name == "RolltopContainer" then
									local prompt = v:WaitForChild("ActivateEventPrompt")
									local interactions = prompt:GetAttribute("Interactions")

									if not interactions then
										task.spawn(function()
											repeat task.wait(0.1)
												--pcall(function()
												local posok = false
												pcall(function()
													local posoks, posoke = pcall(function()
														posok = (plr:DistanceFromCharacter(v.PrimaryPart.Position) <= 12)
													end)
													if posoke then
														local part
														for _,v in pairs(v:GetChildren()) do
															local hasProperty = pcall(function() local t = v["Position"] end)
															if hasProperty then
																part = v
																break
															end
														end
														posok = (plr:DistanceFromCharacter(part.Position) <= 12)
													end
												end)
												if posok then
													fireproximityprompt(prompt)
												end
												--end)
											until prompt:GetAttribute("Interactions") or not flags.draweraura
										end)
									end
								end 
								--end
							end
						end

						local subaddcon
						subaddcon = room.DescendantAdded:Connect(function(ve)
							check(ve) 
						end)

						for _,v in pairs(room:GetDescendants()) do
							task.spawn(function()
								check(v)
							end)
						end

						task.spawn(function()
							repeat task.wait() until not flags.draweraura
							subaddcon:Disconnect() 
						end)
					end

					local addconnect
					addconnect = workspace.CurrentRooms.ChildAdded:Connect(function(room)
						setup(room)
					end)

					for i,room in pairs(workspace.CurrentRooms:GetChildren()) do
						if room:FindFirstChild("Assets") then
							setup(room) 
						end
					end
					setup(workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)])

				repeat task.wait() until MAXEDLOADED == false or not flags.draweraura
					addconnect:Disconnect()
				end
			end,
		})
		buttons.draweraura = draweraurabtn
		else
		oldwarnmessage("Maxed v"..currentver, "You need to have fireproximityprompt function for 'loot aura'.", 7)

	end
	
	if fireproximityprompt then
		local bookcollecterbtn = MainTab:CreateToggle({
			Name = "Book Aura",
			CurrentValue = false,
			Flag = "bookaura", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
			Callback = function(val, oldval)
				flags.bookcollecter = val

				if val then
					local function setup(room)
						local function check(v)
							if v:IsA("Model") then
								--if v.PrimaryPart then
								if v.Name == "LiveHintBook" then
									local prompt = v:WaitForChild("ActivateEventPrompt")

									local okcanckl = 0
									task.spawn(function()
										repeat task.wait(0.1)
											local posok = false
											pcall(function()
												local posoks, posoke = pcall(function()
													posok = (plr:DistanceFromCharacter(v.PrimaryPart.Position) <= 12)
												end)
												if posoke then
													local part
													for _,v in pairs(v:GetChildren()) do
														local hasProperty = pcall(function() local t = v["Position"] end)
														if hasProperty then
															part = v
															break
														end
													end
													posok = (plr:DistanceFromCharacter(part.Position) <= 12)
												end
											end)
											if posok then
												fireproximityprompt(prompt) 
												okcanckl += 1
											end
										until not v:IsDescendantOf(workspace) or not prompt:IsDescendantOf(workspace) or not flags.bookcollecter or okcanckl > 50
									end)
								end
								--end
							end

						end

						local subaddcon
						subaddcon = room.DescendantAdded:Connect(function(v)
							check(v) 
						end)

						for i,v in pairs(room:GetDescendants()) do
							check(v)
						end

						task.spawn(function()
						repeat task.wait() until MAXEDLOADED == false or not flags.bookcollecter
							subaddcon:Disconnect() 
						end)
					end

					repeat task.wait()if flags.bookcollecter == false then break end until game:GetService("ReplicatedStorage").GameData.LatestRoom.Value == 50

					if flags.bookcollecter == true then
						local addconnect
						addconnect = workspace.CurrentRooms.ChildAdded:Connect(function(room)
							setup(room)
						end)

						for i,room in pairs(workspace.CurrentRooms:GetChildren()) do
							if room:FindFirstChild("Assets") then
								setup(room) 
							end
						end
						--	if workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:FindFirstChild("Assets") then
						setup(workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)])
						--	end

						repeat task.wait() until not flags.bookcollecter
						addconnect:Disconnect()
					end
				end
			end,
		})
		buttons.bookcollecter = bookcollecterbtn
		else
		oldwarnmessage("Maxed v"..currentver, "You need to have fireproximityprompt function for 'book aura'.", 7)

	end
	if fireproximityprompt then
		local breakercollecterbtn = MainTab:CreateToggle({
			Name = "Breaker Aura",
			CurrentValue = false,
			Flag = "breakeraura", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
			Callback = function(val, oldval)
				flags.breakercollecter = val

				if val then
					local function setup(room)
						local function check(v)
							if v:IsA("Model") then
								--if v.PrimaryPart then
								if v.Name == "LiveBreakerPolePickup" then
									local prompt = v:WaitForChild("ActivateEventPrompt")

									local okcanckl = 0
									task.spawn(function()
										repeat task.wait(0.1)
											local posok = false
											pcall(function()
												local posoks, posoke = pcall(function()
													posok = (plr:DistanceFromCharacter(v.PrimaryPart.Position) <= 12)
												end)
												if posoke then
													local part
													for _,v in pairs(v:GetChildren()) do
														local hasProperty = pcall(function() local t = v["Position"] end)
														if hasProperty then
															part = v
															break
														end
													end
													posok = (plr:DistanceFromCharacter(part.Position) <= 12)
												end
											end)
											if posok then
												fireproximityprompt(prompt) 
												okcanckl += 1
											end
										until not v:IsDescendantOf(workspace) or not prompt:IsDescendantOf(workspace) or not flags.breakercollecter or okcanckl > 50
									end)
								end
								--end
							end

						end

						local subaddcon
						subaddcon = room.DescendantAdded:Connect(function(v)
							check(v) 
						end)

						for i,v in pairs(room:GetDescendants()) do
							check(v)
						end

						task.spawn(function()
						repeat task.wait() until MAXEDLOADED == false or not flags.breakercollecter
							subaddcon:Disconnect() 
						end)
					end

					repeat task.wait()if flags.breakercollecter == false then break end until game:GetService("ReplicatedStorage").GameData.LatestRoom.Value == 100

					if flags.breakercollecter == true then
						local addconnect
						addconnect = workspace.CurrentRooms.ChildAdded:Connect(function(room)
							setup(room)
						end)

						for i,room in pairs(workspace.CurrentRooms:GetChildren()) do
							if room:FindFirstChild("Assets") then
								setup(room) 
							end
						end
						--	if workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:FindFirstChild("Assets") then
						setup(workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)])
						--	end

					repeat task.wait() until MAXEDLOADED == false or not flags.breakercollecter
						addconnect:Disconnect()
					end
				end
			end,
		})
		buttons.breakercollecter = breakercollecterbtn
	else 
		oldwarnmessage("Maxed v"..currentver, "You need to have fireproximityprompt function for 'book aura'.", 7)

	end
	if fireproximityprompt then
		local autopullleverbtn = MainTab:CreateToggle({
			Name = "Lever Aura",
			CurrentValue = false,
			Flag = "leveraura", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
			Callback = function(val, oldval)
				flags.autopulllever = val

				if val then
					local function setup(room)
						local function check(v)
							--if v:IsA("Model") then
							--	if v.PrimaryPart then
							if v.Name == "LeverForGate" then
								local prompt = v:WaitForChild("ActivateEventPrompt")

								local okcanckl = 0
								pcall(function() v.PrimaryPart:WaitForChild("SoundToPlay").Played:Connect(function() okcanckl = 100 end) end)
								task.spawn(function()
									repeat task.wait(0.1)
										local posok = false
										pcall(function()
											local posoks, posoke = pcall(function()
												posok = (plr:DistanceFromCharacter(v.PrimaryPart.Position) <= 12)
											end)
											if posoke then
												local part
												for _,v in pairs(v:GetChildren()) do
													local hasProperty = pcall(function() local t = v["Position"] end)
													if hasProperty then
														part = v
														break
													end
												end
												posok = (plr:DistanceFromCharacter(part.Position) <= 12)
											end
										end)
										if posok then
											fireproximityprompt(prompt) 
											okcanckl += 1
										end
									until not v:IsDescendantOf(workspace) or not prompt:IsDescendantOf(workspace) or not flags.autopulllever or okcanckl > 50
								end)
							end
							--	end
							--endd

						end

						local subaddcon
						subaddcon = room.DescendantAdded:Connect(function(v)
							check(v) 
						end)

						for i,v in pairs(room:GetDescendants()) do
							check(v)
						end

						task.spawn(function()
						repeat task.wait() until MAXEDLOADED == false or not flags.autopulllever
							subaddcon:Disconnect() 
						end)
					end

					if flags.autopulllever == true then
						local addconnect
						addconnect = workspace.CurrentRooms.ChildAdded:Connect(function(room)
							setup(room)
						end)

						for i,room in pairs(workspace.CurrentRooms:GetChildren()) do
							if room:FindFirstChild("Assets") then
								setup(room) 
							end
						end
						--	if workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:FindFirstChild("Assets") then
						setup(workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)])
						--	end

					repeat task.wait() until MAXEDLOADED == false or not flags.autopulllever
						addconnect:Disconnect()
					end
				end
			end,
		})
		buttons.autopulllever = autopullleverbtn
	else
	oldwarnmessage("Maxed v"..currentver, "You need to have fireproximityprompt function for 'lever aura'.", 7)
	
	
	pcall(function() getgenv().MAXEDLOADED = false;MAXEDLOADED = false end)


	end
	
	end
local START_TIME = os.time()
local customnotifid = "10469938989"

local oldcustomnotifid = "4590657391"
function waitframes(ii) for i = 1, ii do task.wait() end end


local plr = game.Players.LocalPlayer
local char = plr.Character or plr.CharacterAdded:Wait()
local hum = char:FindFirstChildOfClass("Humanoid") or char:WaitForChild("Humanoid")
local LatestRoom = game:GetService("ReplicatedStorage").GameData.LatestRoom
local Players = game:GetService("Players")
local inRooms = false
local RequestFunction


local NotificationHolder = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Module.Lua"))()
local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Client.Lua"))()
function message(text)
	task.spawn(function()
		local notif = Instance.new("Sound");notif.Parent = game.SoundService;notif.SoundId = "rbxassetid://4590657391";notif.Volume = 3;notif:Play();notif.Stopped:Wait();notif:Destroy()
	end)
	task.spawn(function()
		local msg = Instance.new("Message",workspace)
		msg.Text = tostring(text)
		task.wait(5)
		msg:Destroy()
	end)
end
local currentver = "3.8"
if game.PlaceId == 6839171747 then



	function normalmessage(title, text, reason, timee, image, textlabel, waitforinsttodelete)
		task.spawn(function()
			do
				local AchievementsFolder = require(game:GetService("ReplicatedStorage"):WaitForChild("Achievements"))
				if not game.Players.LocalPlayer.PlayerGui:FindFirstChild("MainUI") then
					repeat task.wait() until game.Players.LocalPlayer.PlayerGui:FindFirstChild("MainUI")
				end
				local MainUI =  game.Players.LocalPlayer.PlayerGui.MainUI
				local TweenService = game:GetService("TweenService")

				if title == nil or typeof(title) ~= "string" or string.len(title) == 0 then return end
				if text == nil or typeof(text) ~= "string" or string.len(text) == 0 then return end
				if reason == nil or typeof(reason) ~= "string" or string.len(reason) == 0 then reason = "" end
				if textlabel == nil or typeof(textlabel) ~= "string" then textlabel = "NOTIFICATION" end
				if timee == nil or timee == 0 or typeof(timee) ~= "number" then timee = 5 end
				if image == nil or typeof(image) ~= "string" then 
					image = "6023426923" 
				end

				local AchievementFrame = MainUI.AchievementsHolder.Achievement:Clone();
				AchievementFrame.Size = UDim2.new(0, 0, 0, 0);
				AchievementFrame.Frame.Position = UDim2.new(1.1, 0, 0, 0);
				AchievementFrame.Name = "LiveAchievement";
				AchievementFrame.Visible = true;

				AchievementFrame.Frame.TextLabel.Text = textlabel
				if textlabel == "WARNING" then AchievementFrame.Frame.TextLabel.TextColor3 = Color3.fromRGB(175, 0, 0);AchievementFrame.Frame.UIStroke.Color = Color3.fromRGB(175, 0, 0);AchievementFrame.Frame.Glow.ImageColor3 = Color3.fromRGB(175, 0, 0); end
				AchievementFrame.Frame.Details.Desc.Text = tostring(text)
				AchievementFrame.Frame.Details.Title.Text = tostring(title)
				AchievementFrame.Frame.Details.Reason.Text = tostring(reason or "")

				AchievementFrame.Frame.ImageLabel.Image = "rbxassetid://"..tostring(image or "0")

				AchievementFrame.Parent = MainUI.AchievementsHolder;
				AchievementFrame.Sound.SoundId = "rbxassetid://"..customnotifid
				if textlabel == "WARNING" then AchievementFrame.Sound.Volume = 2 else AchievementFrame.Sound.Volume = 1 end
				AchievementFrame.Sound:Play();
				if textlabel == "WARNING" then AchievementFrame:TweenSize(UDim2.new(1, 0, 0.2, 0), "In", "Quad", 0.3, true); else AchievementFrame:TweenSize(UDim2.new(1, 0, 0.2, 0), "In", "Quad", 0.8, true); end
				if textlabel == "WARNING" then wait(0.3) else wait(0.8) end
				AchievementFrame.Frame:TweenPosition(UDim2.new(0, 0, 0, 0), "Out", "Quad", 0.5, true);
				TweenService:Create(AchievementFrame.Frame.Glow, TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {
					ImageTransparency = 1
				}):Play()
				if waitforinsttodelete ~= nil and typeof(waitforinsttodelete) == "Instance" then
					waitforinsttodelete.Destroying:Wait()
				else
					wait(timee)
				end
				AchievementFrame.Frame:TweenPosition(UDim2.new(1.1, 0, 0, 0), "In", "Quad", 0.5, true)
				wait(0.5)
				AchievementFrame:TweenSize(UDim2.new(1, 0, -0.1, 0), "InOut", "Quad", 0.5, true)
				wait(0.5)
				AchievementFrame:Destroy()
			end
		end)
	end
	function warnmessage(title, text, reason, timee, image, waitforinsttodelete)
		normalmessage(title, text, reason, timee, image, "WARNING", waitforinsttodelete)
	end

	function confirmnotification(title, text, timee, callback)
		task.spawn(function()
			local notif = Instance.new("Sound");notif.Parent = game.SoundService;notif.SoundId = "rbxassetid://"..oldcustomnotifid;notif.Volume = 1;notif:Play();notif.Stopped:Wait();notif:Destroy()
		end)
		Notification:Notify(
			{Title = title, Description = text},
			{OutlineColor = Color3.fromRGB(80, 80, 80), Time = timee or 10, Type = "option"},
			{Image = "http://www.roblox.com/asset/?id=6023426923", ImageColor = Color3.fromRGB(255, 84, 84), Callback = callback or function(state)end}
		)
	end

	function oldnormalmessage(title, text, timee)
		task.spawn(function()
			local notif = Instance.new("Sound");notif.Parent = game.SoundService;notif.SoundId = "rbxassetid://"..oldcustomnotifid;notif.Volume = 1;notif:Play();notif.Stopped:Wait();notif:Destroy()
		end)
		Notification:Notify(
			{Title = title, Description = text},
			{OutlineColor = Color3.fromRGB(80, 80, 80),Time = timee or 5, Type = "default"}
		)
	end 

	function oldwarnmessage(title, text, timee)
		task.spawn(function()
			local notif = Instance.new("Sound");notif.Parent = game.SoundService;notif.SoundId = "rbxassetid://"..oldcustomnotifid;notif.Volume = 2;notif:Play();notif.Stopped:Wait();notif:Destroy()
		end)
		Notification:Notify(
			{Title = title, Description = text},
			{OutlineColor = Color3.fromRGB(80, 80, 80),Time = timee or 5, Type = "image"},
			{Image = "http://www.roblox.com/asset/?id=6023426923", ImageColor = Color3.fromRGB(255, 84, 84)}
		)
	end
	function randomString()local length = math.random(10,20);local array = {};for i = 1, length do array[i] = string.char(math.random(32, 126)) end;return table.concat(array);end

	local PathModule = {}
	local PathfindingService = game:GetService("PathfindingService")
	local VisualizerFolder = game.Workspace:FindFirstChild("PDVisualizer")
	if VisualizerFolder == nil then
		VisualizerFolder = Instance.new("Folder", workspace)
		VisualizerFolder.Name = "PDVisualizer"
	end
	VisualizerFolder:ClearAllChildren()

	local VisualizeColors = {
		Normal = Color3.fromRGB(255, 139, 0),
		Jump = Color3.fromRGB(255, 0, 0),
		Finish = Color3.fromRGB(0, 255, 0)
	}

	function PathModule.visualize(waypoints, waypointSpacing)
		for _, waypoint in ipairs(waypoints) do
			local visualWaypointClone = Instance.new("Part")
			visualWaypointClone.Size = Vector3.new(0.3, 0.3, 0.3)
			visualWaypointClone.Anchored = true
			visualWaypointClone.CanCollide = false
			visualWaypointClone.Material = Enum.Material.Neon
			visualWaypointClone.Shape = Enum.PartType.Ball
			visualWaypointClone.Position = waypoint.Position + Vector3.new(0, 3, 0)
			visualWaypointClone.Color =
				(
					waypoint == waypoints[#waypoints] and VisualizeColors.Finish
					or (waypoint == waypoints[#waypoints-1] and VisualizeColors.Finish)
					or (waypoint == waypoints[#waypoints-2] and VisualizeColors.Finish)
					or (waypoint.Action == Enum.PathWaypointAction.Jump and VisualizeColors.Jump)
					or VisualizeColors.Normal
				)
			visualWaypointClone.Parent = VisualizerFolder
		end
	end
	function PathModule.new(char, goal, agentParameters, jumpingAllowed, offset)
		if not (char and char:IsA("Model") and char.PrimaryPart) then return end
		if not PathfindingService then PathfindingService = game:GetService("PathfindingService") end 

		local Path = PathfindingService:CreatePath(agentParameters or {})
		local HRP = char:FindFirstChild("HumanoidRootPart")
		local Humanoid = char:FindFirstChildWhichIsA("Humanoid")

		if not HRP then HRP = char.PrimaryPart end
		if jumpingAllowed == nil or typeof(jumpingAllowed) ~= "boolean" then jumpingAllowed = false end

		local waypoints

		pcall(function() HRP:SetNetworkOwner(nil) end)

		local Success, ErrorMessage = pcall(function()
			if offset then
				Path:ComputeAsync(HRP.Position - offset, goal)
			else
				Path:ComputeAsync(HRP.Position, goal)
			end
		end)

		if Success and Path.Status == Enum.PathStatus.Success then 
			waypoints = Path:GetWaypoints()
			PathModule.visualize(waypoints)

			for i, v in pairs(waypoints) do
				if MAXEDLOADED == false or not v then return end

				if char.HumanoidRootPart.Anchored == false then
					if jumpingAllowed == true then if v.Action == Enum.PathWaypointAction.Jump then Humanoid:ChangeState(Enum.HumanoidStateType.Jumping) end end
					Humanoid:MoveTo(v.Position)
					Humanoid.MoveToFinished:Wait()
				end
			end

			VisualizerFolder:ClearAllChildren()
			return true
		else
			return false
		end
	end

	local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Rayfield/main/source'))()

	local currentver = "3.8"
	local gui_data = nil
	local s,e = pcall(function()
		gui_data = game:HttpGet(("https://raw.githubusercontent.com/GambolOfficial/sddd/main/gui_data.json"), true)
		gui_data = game:GetService("HttpService"):JSONDecode(gui_data)
	end)
	if e then
		oldwarnmessage("MAXED v"..currentver, "Failed to get script data.", 10)
	end

	if MAXEDLOADED == true then warnmessage("MAXED v"..currentver, "GUI already loaded!", "", 10) return end
	if game.PlaceId ~= 6839171747 and game.PlaceId ~= 6516141723 then 
		oldwarnmessage("MAXED v"..currentver, "You need to join DOORS to run this script.", 10) 
		return
	end
	if gui_data ~= nil then
		if currentver ~= gui_data.ver or gui_data.ver ~= currentver then
			warnmessage("MAXED v"..currentver, "You are using an outdated version of this script", "Loading latest version.", 10) 
			loadstring(game:HttpGet((gui_data.loadstring.."?" .. tostring(math.random(0, 9999999)) ),true))()
			return
		else
			currentver = tostring(gui_data.ver)
		end
	end
	pcall(function() getgenv().MAXEDLOADED = true end)
	normalmessage("MAXED v"..currentver, "Loading script...", "", 2)
	if gui_data ~= nil then
		oldnormalmessage("INFO", gui_data.changelog, 20)
	end




	-- Window	
	local Window = Rayfield:CreateWindow({
		Name = "Maxed",
		LoadingTitle = "Doors Script",
		LoadingSubtitle = "by Gambol",
		ConfigurationSaving = {
			Enabled = true,
			FolderName = "Maxed Hub", -- Create a custom folder for your hub/game
			FileName = "Maxed Hub"
		},
		Discord = {
			Enabled = false,
			Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD.
			RememberJoins = true -- Set this to false to make them join the discord every time they load it up
		},
		KeySystem = false, -- Set this to true to use our key system
		KeySettings = {
			Title = "Maxed Hub",
			Subtitle = "Key System",
			Note = "Dm Gambol with the word (among us) to recieve the key.",
			FileName = "Gambol Key",
			SaveKey = true,
			GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
			Key = "PPNFMNAWLZVWAQCZMKYVJCZALSDSSXQDFAR"
		}
	})

	-- Tabs
	local MainTab = Window:CreateTab("Main", 4483362458) -- Title, Image

	local ToolsTab = Window:CreateTab("Tools", 4483362458) -- Title, Image

	local ScriptsTab = Window:CreateTab("Scripts", 4483362458) -- Title, Image

	local CharTab = Window:CreateTab("Character", 4483362458) -- Title, Image

	local RoomsTab = Window:CreateTab("The Rooms", 4483362458)

	local ConfigTab = Window:CreateTab("Configs", 4483362458) -- Title, Image	


	-- Flags 
	local flags = {
		-- general
		light = false,
		fullbright = false,
		instapp = false,
		noseek = false,
		nogates = false,
		nopuzzle = false,
		noa90 = false,
		noskeledoors = false,
		noscreech = false,
		notimothy = false,
		getcode = false,
		roomsnolock = false,
		heartbeatwin = false,
		noseekarmsfire = false,
		avoidrushambush = false,
		autoplayagain = false,
		anticheatbypass = false,
		noclip = false, --fly = false
		autoskiprooms = false,
		camfov = 70,
		speed = 0,
		walkspeedtoggle = false,
		camfovtoggle = false,
		autopulllever = false,
		customnotifid = "10469938989",
		oldcustomnotifid = "4590657391",
		noeyesdamage = false,

		-- esp
		espdoors = false,
		espkeys = false,
		espitems = false,
		espbooks = false,
		esprush = false,
		espchest = false,
		esplocker = false,
		esphumans = false,
		espgold = false,
		goldespvalue = 0,
		--fakeespdoors = false,
		tracers = false,

		-- notifiers
		hintrush = false,
		predictentities = false,

		-- auras
		draweraura = false,
		keyaura = false,
		breakercollecter = false,
		bookcollecter = false,

		-- auto a-1000
		autorooms = false,
		autorooms_debug = false,
		autorooms_blockcontrols = false,

		-- trolling
		dropdowntrolling = "None"
	}
	local buttons = {
		-- general
		light = nil,
		fullbright = nil,
		instapp = nil,
		noseek = nil,
		nogates = nil,
		nopuzzle = nil,
		noa90 = nil,
		noskeledoors = nil,
		noscreech = nil,
		notimothy = nil,
		getcode = nil,
		roomsnolock = nil,
		heartbeatwin = nil,
		noseekarmsfire = nil,
		avoidrushambush = nil,
		autoplayagain = nil,
		anticheatbypass = nil,
		noclip = nil, --fly = false
		autoskiprooms = nil,
		camfov = nil,
		speed = nil,
		walkspeedtoggle = nil,
		camfovtoggle = nil,
		autopulllever = nil,
		customnotifid = nil,
		oldcustomnotifid = nil,
		noeyesdamage = nil,

		-- esp
		espdoors = nil,
		espkeys = nil,
		espitems = nil,
		espbooks = nil,
		esprush = nil,
		espchest = nil,
		esplocker = nil,
		esphumans = nil,
		espgold = nil,
		goldespvalue = nil,
		--fakeespdoors = nil,
		tracers = nil,

		-- notifiers
		hintrush = nil,
		predictentities = nil,

		-- auras
		draweraura = nil,
		keyaura = nil,
		breakercollecter = nil,
		bookcollecter = nil,

		-- auto a-1000
		autorooms = nil,
		autorooms_debug = nil,
		autorooms_blockcontrols = nil,

		-- trolling
		dropdowntrolling = nil
	}
	customnotifid = flags.customnotifid

	local DELFLAGS = {table.unpack(flags)}
	local esptable = {doors={},keys={},items={},books={},entity={},chests={},lockers={},people={},gold={},fakedoors={}}
	local function changeBrightness(color)
		local h, s, v = color:ToHSV()
		return Color3.fromHSV(h, s, v/2)
	end

	local GlobalESPFolder = game.CoreGui:FindFirstChild("ESPFolder")
	if GlobalESPFolder == nil then
		GlobalESPFolder = Instance.new("Folder", game.CoreGui)
		GlobalESPFolder.Name = "ESPFolder"
	end
	local esptableinstances = {}
	local Camera = workspace.CurrentCamera
	local WorldToViewportPoint = Camera.WorldToViewportPoint
	local WorldToViewport = function(...) return WorldToViewportPoint(Camera, ...) end
	function TracerESP(Color, instance)
		if Drawing then
			local Tracer = Drawing.new("Line")
			Tracer.Visible = false
			Tracer.Color = Color
			Tracer.Thickness = 2
			Tracer.Transparency = 1

			local con = game:GetService("RunService").RenderStepped:Connect(function()
				if instance ~= nil and flags.tracers == true then		
					local ScreenPosition, Vis = WorldToViewport(instance.Position);
					local OPos = Camera.CFrame:pointToObjectSpace(instance.Position);
					if ScreenPosition.Z < 0 then
						local AT = math.atan2(OPos.Y, OPos.X) + math.pi;
						OPos = CFrame.Angles(0, 0, AT):vectorToWorldSpace((CFrame.Angles(0, math.rad(89.9), 0):vectorToWorldSpace(Vector3.new(0, 0, -1))));
					end
					local Position = WorldToViewport(Camera.CFrame:pointToWorldSpace(OPos));
					if Vis then
						local TracerPosition = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 1)
						Tracer.Visible = true
						Tracer.From = TracerPosition
						Tracer.To = Vector2.new(Position.X, Position.Y)
					else
						Tracer.Visible = false
					end
				else
					Tracer.Visible = false
				end
			end)

			local ret = {}
			ret.delete = function()
				task.spawn(function()
					if con then con:Disconnect() end
					Tracer:Remove()
				end)
			end

			instance.Destroying:Connect(function() ret.delete() end)
			return ret
		else
			local ret = {}
			ret.delete = function() end
			return ret
		end
	end
	function esp(what,color,core,name)
		local parts

		local esp_folder = GlobalESPFolder:FindFirstChild(name)
		if game.Players:FindFirstChild(name) then
			esp_folder = GlobalESPFolder:FindFirstChild("PlayerESP")
			if not esp_folder then
				esp_folder = Instance.new("Folder")
				esp_folder.Parent = GlobalESPFolder
				esp_folder.Name = "PlayerESP"
			end
		end
		if not esp_folder then
			esp_folder = Instance.new("Folder")
			esp_folder.Parent = GlobalESPFolder
			esp_folder.Name = name
		end

		if typeof(what) == "Instance" then
			if what:IsA("Model") then
				parts = what:GetChildren()
			elseif what:IsA("BasePart") then
				parts = {what,table.unpack(what:GetChildren())}
			end
		elseif typeof(what) == "table" then
			parts = what
		end

		local bill
		local boxes = {}

		local s,e = pcall(function()
			if typeof(parts) ~= "table" then parts = {parts} end

			for i,v in pairs(parts) do
				if typeof(v) == "table" then
					for ii,vv in pairs(v) do
						if vv:IsA("BasePart") then
							local box = Instance.new("BoxHandleAdornment")
							box.Size = v.Size
							box.AlwaysOnTop = true
							box.ZIndex = 1
							box.AdornCullingMode = Enum.AdornCullingMode.Never
							box.Color3 = color
							box.Transparency = 0.7
							box.Adornee = v
							box.Parent = esp_folder

							table.insert(boxes, box)

							task.spawn(function()
								box.Adornee.Destroying:Connect(function()
									box.Adornee = nil
									box.Visible = false
									box:Destroy()
								end)
								--while box do
								--	if box.Adornee == nil or not box.Adornee:IsDescendantOf(workspace) then
								--		box.Adornee = nil
								--		box.Visible = false
								--		box:Destroy()
								--	end  
								--	task.wait()
								--end
							end)
						end
					end
				else
					if v:IsA("BasePart") then
						local box = Instance.new("BoxHandleAdornment")
						box.Size = v.Size
						box.AlwaysOnTop = true
						box.ZIndex = 1
						box.AdornCullingMode = Enum.AdornCullingMode.Never
						box.Color3 = color
						box.Transparency = 0.7
						box.Adornee = v
						box.Parent = esp_folder

						table.insert(boxes, box)

						task.spawn(function()
							box.Adornee.Destroying:Connect(function()
								box.Adornee = nil
								box.Visible = false
								box:Destroy()
							end)
							--while box do
							--	if box.Adornee == nil or not box.Adornee:IsDescendantOf(workspace) then
							----		box.Adornee = nil
							--		box.Visible = false
							--		box:Destroy()
							--	end  
							--	task.wait()
							--end
						end)
					end
				end
			end
		end)

		if e then
			warn(e)
			print("box esp failed")
		end

		if core and name then
			bill = Instance.new("BillboardGui", esp_folder)
			bill.AlwaysOnTop = true
			bill.Size = UDim2.new(0,400,0,100)
			bill.Adornee = core
			bill.MaxDistance = 2000

			local mid = Instance.new("Frame",bill)
			mid.AnchorPoint = Vector2.new(0.5,0.5)
			mid.BackgroundColor3 = color
			mid.Size = UDim2.new(0,8,0,8)
			mid.Position = UDim2.new(0.5,0,0.5,0)
			Instance.new("UICorner",mid).CornerRadius = UDim.new(1,0)
			Instance.new("UIStroke",mid)

			local txt = Instance.new("TextLabel",bill)
			txt.AnchorPoint = Vector2.new(0.5,0.5)
			txt.BackgroundTransparency = 1
			txt.BackgroundColor3 = color
			txt.TextColor3 = color
			txt.Size = UDim2.new(1,0,0,20)
			txt.Position = UDim2.new(0.5,0,0.7,0)
			txt.Text = name
			Instance.new("UIStroke",txt)

			task.spawn(function()
				bill.Adornee.Destroying:Connect(function()
					bill.Enabled = false
					bill.Adornee = nil
					--pcall(function() table.remove(boxes, table.find(boxes, bill)) end)
					bill:Destroy() 
				end)
				--while bill do
				--	if bill.Adornee == nil or not bill.Adornee:IsDescendantOf(workspace) then
				--		bill.Enabled = false
				--		bill.Adornee = nil
				--		--pcall(function() table.remove(boxes, table.find(boxes, bill)) end)
				--		bill:Destroy() 
				--	end  
				--	task.wait()
				--end
			end)
		end

		local Tracer = nil
		if flags.tracers == true then Tracer = TracerESP(color, core) end

		local ret = {}
		ret.delete = function()
			task.spawn(function()
				for i,v in pairs(boxes) do
					pcall(function()
						table.remove(esptableinstances, table.find(esptableinstances, v.Adornee))
					end)
					pcall(function()
						table.remove(esptableinstances, table.find(esptableinstances, v.Parent))
					end)
					v.Adornee = nil
					v.Visible = false
					v:Destroy()
					task.wait()
				end
			end)

			if bill then
				pcall(function()
					table.remove(esptableinstances, table.find(esptableinstances, bill.Adornee))
				end)
				pcall(function()
					table.remove(esptableinstances, table.find(esptableinstances, bill.Parent))
				end)
				bill.Adornee = nil
				bill.Enabled = false
				bill:Destroy() 
			end

			if Tracer then Tracer.delete() end
		end

		return ret 
	end

	-- Sections
	local Section = MainTab:CreateSection("Player")	

	-- Toggles	

	-- Client Glow
	local clientglowbtn = MainTab:CreateToggle({
		Name = "Client Glow",
		CurrentValue = false,
		Flag = "light", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.light = val

			if val then
				local l = Instance.new("PointLight")
				l.Range = 10000
				l.Brightness = 2
				l.Parent = char.PrimaryPart

				repeat task.wait() until MAXEDLOADED == false or not flags.light
				l:Destroy() 
			end
		end,
	})
	buttons.light = clientglowbtn

	-- Fullbright

	local cfullbrightbtn = MainTab:CreateToggle({
		Name = "Fullbright",
		CurrentValue = false,
		Flag = "fbe", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.fullbright = val

			if val then
				local oldAmbient = game:GetService("Lighting").Ambient
				local oldColorShift_Bottom = game:GetService("Lighting").ColorShift_Bottom
				local oldColorShift_Top = game:GetService("Lighting").ColorShift_Top

				local function doFullbright()
					if flags.fullbright == true then
						game:GetService("Lighting").Ambient = Color3.new(1, 1, 1)
						game:GetService("Lighting").ColorShift_Bottom = Color3.new(1, 1, 1)
						game:GetService("Lighting").ColorShift_Top = Color3.new(1, 1, 1)
					else
						game:GetService("Lighting").Ambient = oldAmbient
						game:GetService("Lighting").ColorShift_Bottom = oldColorShift_Bottom
						game:GetService("Lighting").ColorShift_Top = oldColorShift_Top
					end
				end
				doFullbright()

				local coneee = game:GetService("Lighting").LightingChanged:Connect(doFullbright)
				repeat task.wait() until MAXEDLOADED == false or not flags.fullbright

				coneee:Disconnect()
				game:GetService("Lighting").Ambient = oldAmbient
				game:GetService("Lighting").ColorShift_Bottom = oldColorShift_Bottom
				game:GetService("Lighting").ColorShift_Top = oldColorShift_Top
			end
		end,
	})
	buttons.fullbright = cfullbrightbtn

	-- Instant use
	if fireproximityprompt then
		local instausebrn = MainTab:CreateToggle({
			Name = "Instant Use",
			CurrentValue = false,
			Flag = "Iou", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
			Callback = function(val, oldval)
				flags.instapp = val

				local holdconnect
				holdconnect = game:GetService("ProximityPromptService").PromptButtonHoldBegan:Connect(function(p)
					fireproximityprompt(p)
				end)

				repeat task.wait() until MAXEDLOADED == false or not flags.instapp
				holdconnect:Disconnect()
			end,
		})
		buttons.instapp = instausebrn
	else
		Rayfield:Notify({
			Title = "Maxed",
			Content = "You need to have fireproximityprompt function for 'instant use",
			Duration = 6.5,
			Image = 4483362458,
		})
	end

	-- Sliders

	-- Fullbright 
	local walkspeedslider = MainTab:CreateSlider({
		Name = "WalkSpeed",
		Range = {16, 22},
		Increment = 1,
		Suffix = "WalkSpeed",
		CurrentValue = 16,
		Flag = "Wsp", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.speed = val
			if flags.walkspeedtoggle == true then
				hum.WalkSpeed = val
			end
		end,
	})
	-- Toggle Walkspeed
	local walkspeedtglbtn = MainTab:CreateToggle({
		Name = "Toggle Walkspeed",
		CurrentValue = false,
		Flag = "wspe", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.walkspeedtoggle = val
			if not val then
				hum.WalkSpeed = 16
			end
		end,
	})
	buttons.walkspeedtoggle = walkspeedtglbtn

	MainTab:CreateButton({
		Name = "Reset Character",
		Callback = function()
			Rayfield:Notify({
				Title = "Reset Character?",
				Content = "Are you sure you want to reset your character?",
				Duration = 6.5,
				Image = 4483362458,
				Actions = { -- Notification Buttons
					mhm = {
						Name = "Yes",
						Callback = function()
							game.Players.LocalPlayer.Character.Humanoid.Health = 0
						end
					},
					nah = {
						Name = "No",
						Callback = function()
							print("Canceled Reset character ")
						end
					},
				},
			})
		end,
	})

	local camfovslider = MainTab:CreateSlider({
		Name = "FOV",
		Range = {50, 120},
		Increment = 1,
		Suffix = "FOV",
		CurrentValue = 70,
		Flag = "Fove", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.camfov = val
		end,
	})
	buttons.camfov = camfovslider
	local togglefovbrn = MainTab:CreateToggle({
		Name = "Toggle FOV",
		CurrentValue = false,
		Flag = "Fov12e3", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val ,oldval)
			flags.camfovtoggle = val
			if not val then


				waitframes(2)
				game:GetService("Workspace").CurrentCamera.FieldOfView = 70
			end
		end,
	})
	buttons.camfovtoggle = togglefovbrn

	task.spawn(function()
		game:GetService("RunService").RenderStepped:Connect(function()
			if flags.walkspeedtoggle == true then
				if hum.WalkSpeed < flags.speed then
					hum.WalkSpeed = flags.speed
				end
			end
			if flags.camfovtoggle == true then
				if flags.tracers == false then
					pcall(function()
						game:GetService("Workspace").CurrentCamera.FieldOfView = flags.camfov
					end)
				else
					if syn or PROTOSMASHER_LOADED then
						pcall(function()
							game:GetService("Workspace").CurrentCamera.FieldOfView = flags.camfov
						end)
					end
				end
			end
		end)
	end)

	local Section = MainTab:CreateSection("Esp")	

	MainTab:CreateButton({
		Name = "Clear ESP",
		Callback = function()
			pcall(function()
				for _,e in pairs(esptable) do
					for _,v in pairs(e) do
						pcall(function()
							v.delete()
						end)
					end
				end
			end)
			GlobalESPFolder:ClearAllChildren()
		end,
	})

	if Drawing then
		if not syn or not PROTOSMASHER_LOADED then
			local Label = MainTab:CreateLabel("Tracers only work with 70 FOV.")
		end
		local traceresp = MainTab:CreateToggle({
			Name = "Tracers",
			CurrentValue = false,
			Flag = "Tracers", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
			Callback = function(val, oldval)
				flags.tracers = val
			end,
		})

		buttons.tracers = traceresp
	end

	local espdoorsbtn = MainTab:CreateToggle({
		Name = "Doors ESP",
		CurrentValue = false,
		Flag = "espdoor", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.espdoors = val

			if val then
				local function setup(room)
					task.wait(.1)
					local door = room:WaitForChild("Door"):WaitForChild("Door")

					if table.find(esptableinstances, door) then
						return
					end

					task.wait(0.1)
					local h = esp(door,Color3.fromRGB(255,240,0),door,"Door")
					table.insert(esptable.doors,h)
					table.insert(esptableinstances, door)

					door:WaitForChild("Open").Played:Connect(function()
						h.delete()
					end)

					door.AncestryChanged:Connect(function()
						h.delete()
					end)
				end

				local addconnect
				addconnect = workspace.CurrentRooms.ChildAdded:Connect(function(room)
					setup(room)
				end)

				for i,room in pairs(workspace.CurrentRooms:GetChildren()) do
					if room:FindFirstChild("Assets") then
						setup(room) 
					end
					task.wait()
				end

				if workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:FindFirstChild("Assets") then
					setup(workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)])
				end

				repeat task.wait() until MAXEDLOADED == false or not flags.espdoors
				addconnect:Disconnect()

				for i,v in pairs(esptable.doors) do
					v.delete()
				end 
			end
		end,
	})
	buttons.espdoors = espdoorsbtn

	local espkeysbtn = MainTab:CreateToggle({
		Name = "Key/Lever ESP",
		CurrentValue = false,
		Flag = "espkey", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.espkeys = val

			if val then
				local function check(v, room)
					task.wait()
					if table.find(esptableinstances, v) then
						return
					end

					if v:IsA("Model") then
						if v.Name == "ElectricalKeyObtain" then
							local hitbox = v:FindFirstChild("Hitbox")
							local parts = hitbox:GetChildren()
							table.remove(parts,table.find(parts,v:WaitForChild("PromptHitbox")))

							local h = esp(parts,Color3.fromRGB(90,255,40),hitbox,"Electrical Key")
							table.insert(esptable.keys,h)
							table.insert(esptableinstances, v)
						end
						if v.Name == "KeyObtain" then
							local hitbox = v:FindFirstChild("Hitbox")
							local parts = hitbox:GetChildren()
							table.remove(parts,table.find(parts,hitbox:WaitForChild("PromptHitbox")))

							local h = esp(parts,Color3.fromRGB(90,255,40),hitbox,"Key")
							table.insert(esptable.keys,h)
							table.insert(esptableinstances, v)
						end;if v.Name == "LeverForGate" then
							local h = esp(v,Color3.fromRGB(90,255,40),v.PrimaryPart,"Lever")
							table.insert(esptable.keys,h)
							table.insert(esptableinstances, v)
							v.PrimaryPart:WaitForChild("SoundToPlay").Played:Connect(function()
								h.delete()
							end) 
						end
					end
				end

				local function setup(room)
					local assets = room:FindFirstChild("Assets")

					if room then
						if assets then
							assets.DescendantAdded:Connect(function(v)
								check(v, room) 
							end)
						else
							room.DescendantAdded:Connect(function(v)
								check(v, room) 
							end)
						end
					end

					if assets then
						for i,v in pairs(assets:GetChildren()) do --:GetDescendants()) do
							check(v, room)
						end 
					else
						for i,v in pairs(room:GetDescendants()) do
							check(v, room)
						end 
					end
				end

				local addconnect
				addconnect = workspace.CurrentRooms.ChildAdded:Connect(function(room)
					setup(room)
				end)

				for i,room in pairs(workspace.CurrentRooms:GetChildren()) do
					setup(room)
				end

				setup(workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)])

				repeat task.wait() until MAXEDLOADED == false or not flags.espkeys
				addconnect:Disconnect()

				for i,v in pairs(esptable.keys) do
					v.delete()
				end 
			end
		end,
	})
	buttons.espkeys = espkeysbtn

	local espitemsbtn = MainTab:CreateToggle({
		Name = "Item ESP",
		CurrentValue = false,
		Flag = "espitem", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.espitems = val

			if val then
				local function check(v)
					if table.find(esptableinstances, v) then
						return
					end

					if v:IsA("Model") and (v:GetAttribute("Pickup") or v:GetAttribute("PropType")) then
						task.wait(0.1)

						local part = (v:FindFirstChild("Handle") or v:FindFirstChild("Prop"))
						local h = esp(part,Color3.fromRGB(160,190,255),part,v.Name)
						table.insert(esptable.items,h)
						table.insert(esptableinstances, v)				
					end
				end

				local function setup(room)
					task.wait(.1)
					local assets = room:WaitForChild("Assets")

					if assets then  
						local subaddcon
						subaddcon = assets.DescendantAdded:Connect(function(v)
							check(v) 
						end)

						for i,v in pairs(assets:GetDescendants()) do
							check(v)
						end

						task.spawn(function()
							repeat task.wait() until MAXEDLOADED == false or not flags.espitems
							subaddcon:Disconnect()  
						end) 
					end 
				end

				local addconnect
				addconnect = workspace.CurrentRooms.ChildAdded:Connect(function(room)
					setup(room)
				end)

				for i,room in pairs(workspace.CurrentRooms:GetChildren()) do
					if room:FindFirstChild("Assets") then
						setup(room) 
					end
					task.wait()
				end

				if workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:FindFirstChild("Assets") then
					setup(workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)])
				end

				repeat task.wait() until MAXEDLOADED == false or  not flags.espitems
				addconnect:Disconnect()

				for i,v in pairs(esptable.items) do
					v.delete()
				end 
			end
		end,
	})
	buttons.espitems = espitemsbtn

	local espbooksbtn = MainTab:CreateToggle({
		Name = "Book/Breaker ESP",
		CurrentValue = false,
		Flag = "espbook", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.espbooks = val

			if val then
				local function check(v,room)
					if table.find(esptableinstances, v) then
						return
					end

					if v:IsA("Model") and (v.Name == "LiveHintBook" or v.Name == "LiveBreakerPolePickup") then
						task.wait(0.1)
						local h
						if v.Name == "LiveHintBook" then
							h = esp(v,Color3.fromRGB(160,190,255),v.PrimaryPart,"Book")
						elseif v.Name == "LiveBreakerPolePickup" then
							h = esp(v,Color3.fromRGB(160,190,255),v.PrimaryPart,"Breaker")
						end

						table.insert(esptable.books,h)
						table.insert(esptableinstances, v)

						v.AncestryChanged:Connect(function()
							if not v:IsDescendantOf(room) then
								h.delete() 
							end
						end)
					end
				end

				local function setup(room)
					task.wait(.1)
					if room.Name == "50" or room.Name == "100" then
						room.DescendantAdded:Connect(function(v)
							check(v,room) 
						end)

						for i,v in pairs(room:GetDescendants()) do
							check(v,room)
						end
					end
				end

				local addconnect
				addconnect = workspace.CurrentRooms.ChildAdded:Connect(function(room)
					setup(room)
				end)

				for i,room in pairs(workspace.CurrentRooms:GetChildren()) do
					setup(room) 
					task.wait()
				end

				if workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:FindFirstChild("Assets") then
					setup(workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)])
				end

				repeat task.wait() until MAXEDLOADED == false or not flags.espbooks
				addconnect:Disconnect()

				for i,v in pairs(esptable.books) do
					v.delete()
				end 
			end
		end,
	})
	buttons.espbooks = espbooksbtn
	local entitynames = {"RushMoving","AmbushMoving","Eyes","Snare","A60","A120"}

	local esprusbtn = MainTab:CreateToggle({
		Name = "Entity ESP",
		CurrentValue = false,
		Flag = "esprush1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.esprush = val

			if val then
				local addconnect
				addconnect = workspace.ChildAdded:Connect(function(v)
					if table.find(entitynames,v.Name) then
						task.wait(.1)
						local h = esp(v,Color3.fromRGB(255,25,25),v.PrimaryPart,v.Name:gsub("Moving",""))
						table.insert(esptable.entity,h)
					end
				end)

				for _,v in pairs(workspace:GetChildren()) do
					if table.find(entitynames,v.Name) then
						task.wait(.1)
						local h = esp(v,Color3.fromRGB(255,25,25),v.PrimaryPart,v.Name:gsub("Moving",""))
						table.insert(esptable.entity,h)
					end
				end

				local function setup(room)
					task.wait()
					if room.Name == "50" or room.Name == "100" then
						local figuresetup = room:WaitForChild("FigureSetup")

						if figuresetup then
							local fig = figuresetup:WaitForChild("FigureRagdoll")
							task.wait(0.1)

							local h = esp(fig,Color3.fromRGB(255,25,25),fig.PrimaryPart,"Figure")
							table.insert(esptable.entity,h)
						end 
					else
						local assets = room:WaitForChild("Assets")

						local function check(v)
							if v:IsA("Model") and table.find(entitynames,v.Name) then
								task.wait(0.1)

								local h = esp(v:WaitForChild("Base"),Color3.fromRGB(255,25,25),v.Base,"Snare")
								table.insert(esptable.entity,h)
							end
						end

						assets.DescendantAdded:Connect(function(v)
							check(v) 
						end)

						for i,v in pairs(assets:GetDescendants()) do
							check(v)
						end
					end 
				end

				local roomconnect
				roomconnect = workspace.CurrentRooms.ChildAdded:Connect(function(room)
					setup(room)
				end)

				for i,v in pairs(workspace.CurrentRooms:GetChildren()) do
					setup(v) 
				end

				setup(workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)])

				repeat task.wait() until MAXEDLOADED == false or not flags.esprush
				addconnect:Disconnect()
				roomconnect:Disconnect()

				for i,v in pairs(esptable.entity) do
					v.delete()
				end 
			end
		end,
	})
	buttons.esprush = esprusbtn

	local esplockerbrn = MainTab:CreateToggle({
		Name = "Wardrobe/Locker ESP",
		CurrentValue = false,
		Flag = "esplocker", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.esplocker = val

			if val then
				local function check(v, room)
					task.wait()
					--local okvaluechange = nil
					if v.Name == "Wardrobe" then
						local h = esp(v.PrimaryPart,Color3.fromRGB(145,100,25),v.PrimaryPart,"Closet")
						table.insert(esptable.lockers,h) 
						table.insert(esptableinstances, v)
						--okvaluechange = game:GetService("ReplicatedStorage").GameData.LatestRoom:GetPropertyChangedSignal("Value"):Connect(function()
						--	if tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value) ~= room.Name then
						--		h.delete()
						--		okvaluechange:Disconnect()
						--	end
						--end)
					elseif v.Name == "Rooms_Locker" or v.Name == "Rooms_Locker_Fridge" then
						local h = esp(v.PrimaryPart,Color3.fromRGB(145,100,25),v.PrimaryPart,"Locker")
						table.insert(esptable.lockers,h) 
						table.insert(esptableinstances, v)
						--okvaluechange = game:GetService("ReplicatedStorage").GameData.LatestRoom:GetPropertyChangedSignal("Value"):Connect(function()
						--	if tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value) ~= room.Name then
						--		h.delete()
						--		okvaluechange:Disconnect()
						--	end
						--end)
					end
				end

				local function setup(room)
					local assets = room:WaitForChild("Assets")

					if assets then
						local subaddcon
						subaddcon = assets.DescendantAdded:Connect(function(v)
							check(v, room) 
						end)

						for i,v in pairs(assets:GetDescendants()) do
							check(v, room)
						end

						task.spawn(function()
							repeat task.wait() until MAXEDLOADED == false or not flags.esplocker
							subaddcon:Disconnect()  
						end)
					else
						local subaddcon
						subaddcon = room.DescendantAdded:Connect(function(v)
							check(v, room) 
						end)

						for i,v in pairs(room:GetDescendants()) do
							check(v, room)
						end

						task.spawn(function()
							repeat task.wait() until MAXEDLOADED == false or not flags.esplocker
							subaddcon:Disconnect()  
						end) 
					end
				end

				local addconnect
				addconnect = workspace.CurrentRooms.ChildAdded:Connect(function(room)
					setup(room)
				end)

				if workspace.CurrentRooms:FindFirstChild(tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value-1)) then
					setup(workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value-1)])
				end
				setup(workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)])
				if workspace.CurrentRooms:FindFirstChild(tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value+1)) then
					setup(workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value+1)])
				end

				repeat task.wait() until  MAXEDLOADED == false or not flags.esplocker
				addconnect:Disconnect()

				for i,v in pairs(esptable.lockers) do
					v.delete()
				end 
			end
		end,
	})

	buttons.esplocker = esplockerbrn

	local espchesbtn = MainTab:CreateToggle({
		Name = "Chest ESP",
		CurrentValue = false,
		Flag = "Chestesp", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.espchest = val

			if val then
				local function check(v, room)
					task.wait()
					if table.find(esptableinstances, v) then
						return
					end

					if v:IsA("Model") then
						local okvaluechange = nil
						if v.Name == "ChestBox" then
							warn(v.Name)
							local h = esp(v,Color3.fromRGB(205,120,255),v.PrimaryPart,"Chest")
							table.insert(esptable.chests,h) 
							table.insert(esptableinstances, v)
							okvaluechange = game:GetService("ReplicatedStorage").GameData.LatestRoom:GetPropertyChangedSignal("Value"):Connect(function()
								if tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value) ~= room.Name then
									h.delete()
									okvaluechange:Disconnect()
								end
							end)
						elseif v.Name == "ChestBoxLocked" then
							local h = esp(v,Color3.fromRGB(255,120,205),v.PrimaryPart,"Locked Chest")
							table.insert(esptable.chests,h) 
							table.insert(esptableinstances, v)
							okvaluechange = game:GetService("ReplicatedStorage").GameData.LatestRoom:GetPropertyChangedSignal("Value"):Connect(function()
								if tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value) ~= room.Name then
									h.delete()
									okvaluechange:Disconnect()
								end
							end)
						end
					end
				end

				local function setup(room)
					task.wait(.1)
					local subaddcon
					subaddcon = room.DescendantAdded:Connect(function(v)
						check(v, room) 
					end)

					for i,v in pairs(room:GetDescendants()) do
						check(v, room)
					end

					task.spawn(function()
						repeat task.wait() until MAXEDLOADED == false or not flags.espchest
						subaddcon:Disconnect()  
					end)  
				end

				local addconnect
				addconnect = workspace.CurrentRooms.ChildAdded:Connect(function(room)
					setup(room)
				end)

				for i,room in pairs(workspace.CurrentRooms:GetChildren()) do
					if room:FindFirstChild("Assets") then
						setup(room) 
					end
					task.wait()
				end

				if workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:FindFirstChild("Assets") then
					setup(workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)])
				end

				repeat task.wait() until MAXEDLOADED == false or not flags.espchest
				addconnect:Disconnect()

				for i,v in pairs(esptable.chests) do
					v.delete()
				end
			end
		end,
	})
	buttons.espchest = espchesbtn

	local esphumansbtn = MainTab:CreateToggle({
		Name = "Player ESP",
		CurrentValue = false,
		Flag = "playeresp", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.esphumans = val

			if val then
				local function personesp(v)
					if v:IsA("Player") then
						v.CharacterAdded:Connect(function(vc)
							local vh = vc:WaitForChild("Humanoid")
							local torso = vc:WaitForChild("UpperTorso")
							task.wait(0.1)

							local h = esp(vc,Color3.fromRGB(255,255,255),torso,v.DisplayName)
							table.insert(esptable.people,h) 
						end)

						if v.Character then
							local vc = v.Character
							local vh = vc:WaitForChild("Humanoid")
							local torso = vc:WaitForChild("UpperTorso")
							task.wait(0.1)

							local h = esp(vc,Color3.fromRGB(255,255,255),torso,v.DisplayName)
							table.insert(esptable.people,h) 
						end
					end
				end

				local addconnect
				addconnect = game.Players.PlayerAdded:Connect(function(v)
					if v ~= plr then
						personesp(v)
					end
				end)

				for i,v in pairs(game.Players:GetPlayers()) do
					if v ~= plr then
						personesp(v) 
					end
					task.wait()
				end

				if workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:FindFirstChild("Assets") then
					personesp(workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)])
				end

				repeat task.wait() until MAXEDLOADED == false or not flags.esphumans
				addconnect:Disconnect()

				for i,v in pairs(esptable.people) do
					v.delete()
				end 
			end
		end,
	})
	buttons.esphumans = esphumansbtn

	local espgoldbtn = MainTab:CreateToggle({
		Name = "Gold ESP",
		CurrentValue = false,
		Flag = "goldesp", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.espgold = val

			if val then
				local function check(v)
					if table.find(esptableinstances, v) then
						return
					end

					if v:IsA("Model") then
						task.wait(0.1)
						local goldvalue = v:GetAttribute("GoldValue")

						if goldvalue and goldvalue >= (flags.goldespvalue or 5) then
							local hitbox = v:WaitForChild("Hitbox")
							local h = esp(hitbox:GetChildren(),Color3.fromRGB(255,255,0),hitbox,"GoldPile [".. tostring(goldvalue).."]")
							table.insert(esptable.gold,h)
							table.insert(esptableinstances, v)
						end
					end
				end

				local function setup(room)
					task.wait(.1)
					local assets = room:WaitForChild("Assets")

					local subaddcon
					subaddcon = assets.DescendantAdded:Connect(function(v)
						check(v) 
					end)

					for i,v in pairs(assets:GetDescendants()) do
						check(v)
						task.wait()
					end

					task.spawn(function()
						repeat task.wait() until MAXEDLOADED == false or not flags.espchest
						subaddcon:Disconnect()  
					end)  
				end

				local addconnect
				addconnect = workspace.CurrentRooms.ChildAdded:Connect(function(room)
					setup(room)
				end)

				for i,room in pairs(workspace.CurrentRooms:GetChildren()) do
					if room:FindFirstChild("Assets") then
						setup(room) 
					end
					task.wait()
				end

				if workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:FindFirstChild("Assets") then
					setup(workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)])
				end

				repeat task.wait() until MAXEDLOADED == false or not flags.espgold
				addconnect:Disconnect()

				for i,v in pairs(esptable.gold) do
					v.delete()
				end 
			end
		end,
	})

	buttons.espgold = espgoldbtn

	local goldespvaluebtn = MainTab:CreateSlider({
		Name = "Minimum Gold for Gold ESP",
		Range = {5, 150},
		Increment = 1,
		Suffix = "Gold",
		CurrentValue = 5,
		Flag = "goldslider", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.goldespvalue = val
		end,
	})
	buttons.goldespvalue = goldespvaluebtn

	local Section = MainTab:CreateSection("Entities")

	local hintrushbtn = MainTab:CreateToggle({
		Name = "Notify Entities",
		CurrentValue = false,
		Flag = "entities", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.hintrush = val

		end,
	})
	buttons.hintrush = hintrushbtn

	local predictentitiesbtn = MainTab:CreateToggle({
		Name = "Event Prediction",
		CurrentValue = false,
		Flag = "predictentities", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.predictentities = val
		end,
	})
	buttons.predictentities = predictentitiesbtn
	game:GetService("ReplicatedStorage").GameData.LatestRoom.Changed:Connect(function(value)
		if flags.predictentities == true then
			local ChaseStartVal = game:GetService("ReplicatedStorage").GameData.ChaseStart.Value - value;
			if ((0 < ChaseStartVal) and (ChaseStartVal < 4)) then
				oldwarnmessage("EVENT PREDICTION", "There can be an event in or after Room "..tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value + ChaseStartVal).."!", 10)
			end
		end
	end)

	local noeyesdamagebtn = MainTab:CreateToggle({
		Name = "No Eyes Damage",
		CurrentValue = false,
		Flag = "Noeyes", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.noeyesdamage = val

		end,
	})
	buttons.noeyesdamage = noeyesdamagebtn

	local noseekbtn = MainTab:CreateToggle({
		Name = "Disable Seek chase",
		CurrentValue = false,
		Flag = "noseek", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.noseek = val

			if val then
				local addconnect
				addconnect = workspace.CurrentRooms.ChildAdded:Connect(function(room)
					local trigger = room:WaitForChild("TriggerEventCollision",2)

					if trigger then
						trigger:Destroy() 
					end
				end)

				repeat task.wait() until MAXEDLOADED == false or not flags.noseek
				addconnect:Disconnect()
			end
		end,
	})
	buttons.noseek = noseekbtn

	local ScreechModule = plr.PlayerGui.MainUI.Initiator.Main_Game.RemoteListener.Modules:FindFirstChild("Screech")

	local noscreechbtn = MainTab:CreateToggle({
		Name = "Harmless Screech",
		CurrentValue = false,
		Flag = "noscreech", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.noscreech = val

			if val then
				if not ScreechModule then ScreechModule = plr.PlayerGui.MainUI.Initiator.Main_Game.RemoteListener.Modules:FindFirstChild("Screech") end
				ScreechModule.Parent = nil
			else
				ScreechModule.Parent = plr.PlayerGui.MainUI.Initiator.Main_Game.RemoteListener.Modules
			end
		end,
	})
	buttons.noscreech = noscreechbtn

	local Toggle = MainTab:CreateToggle({
		Name = "No Timothy (Spider) Jumpscare",
		CurrentValue = false,
		Flag = "Nospider", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.notimothy = val

			if val then
				if not SpiderJumpscareModule then SpiderJumpscareModule = plr.PlayerGui.MainUI.Initiator.Main_Game.RemoteListener.Modules:FindFirstChild("SpiderJumpscare") end
				SpiderJumpscareModule.Parent = nil
			else
				SpiderJumpscareModule.Parent = plr.PlayerGui.MainUI.Initiator.Main_Game.RemoteListener.Modules
			end
		end,
	})
	buttons.notimothy = notimothybtn

	if hookmetamethod and newcclosure and getnamecallmethod then
		local Label = MainTab:CreateLabel("Do not click when playing the heartbeat minigame if you have'always win heartbeat' on!")

		local heartbeatwinbtn = MainTab:CreateToggle({
			Name = "Always win Heartbeat minigame",
			CurrentValue = false,
			Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
			Callback = function(val, oldval)
				flags.heartbeatwin = val
			end,
		})
		buttons.heartbeatwin = heartbeatwinbtn

		local old
		old = hookmetamethod(game,"__namecall",newcclosure(function(self,...)
			local args = {...}
			local method = getnamecallmethod()

			if tostring(self) == 'ClutchHeartbeat' and method == "FireServer" and flags.heartbeatwin == true then
				args[2] = true
				return old(self,unpack(args))
			end

			return old(self,...)
		end))
	else
		warnmessage("Maxed v"..currentver, "You need to have hookmetamethod and newcclosure and getnamecallmethod functions for 'always win heartbeat'.", 7)
	end



	-- DropDown


	-- Buttons

	-- Scripts [

	-- Client Glow



	local eyesspawned = false
	workspace.ChildAdded:Connect(function(inst)
		task.spawn(function()
			if table.find(entitynames, inst.Name) and flags.hintrush == true then
				if inRooms == true then
					if inst.Name:gsub("Moving","") == "A60" then
						warnmessage("ENTITIES", inst.Name:gsub("Moving","").." is coming.", "Hide!", 0, "12350986086", inst)
					elseif inst.Name:gsub("Moving","") == "A120" then
						warnmessage("ENTITIES", inst.Name:gsub("Moving","").." is coming.", "Hide!", 0, "12351008553", inst)
					else
						task.wait(.1)
						if plr:DistanceFromCharacter(inst:GetPivot().Position) < 400 and inst:IsDescendantOf(workspace) then
							warnmessage("ENTITIES", inst.Name:gsub("Moving","").." is coming.", "Hide!", 0, "0", inst)
						end
					end
				else
					--if flags.avoidrushambush == false then
					repeat task.wait() until plr:DistanceFromCharacter(inst:GetPivot().Position) < 400 or not inst:IsDescendantOf(workspace)

					if inst:IsDescendantOf(workspace) then
						if inst.Name:gsub("Moving","") == "Rush" then
							warnmessage("ENTITIES", inst.Name:gsub("Moving","").." is coming.", "Hide!", 0, "11102256553", inst)
						elseif inst.Name:gsub("Moving","") == "Ambush" then
							warnmessage("ENTITIES", inst.Name:gsub("Moving","").." is coming.", "Hide!", 0, "10938726652", inst)
						elseif inst.Name:gsub("Moving","") == "Eyes" then
							task.spawn(function()
								if flags.noeyesdamage == true then
									eyesspawned = true
									local con = game:GetService("RunService").RenderStepped:Connect(function()
										eyesspawned = true
										local legrot = 0
										local bodypitch = 85 -- legit -65
										local bodyrot = 0
										game:GetService("ReplicatedStorage").EntityInfo.MotorReplication:FireServer(legrot, bodypitch, bodyrot, false)
									end)
									inst.Destroying:Wait()
									con:Disconnect()
									eyesspawned = false
								end
							end)
							warnmessage("ENTITIES", inst.Name:gsub("Moving","").." spawned.", "Don't look at it!", 10, "10865377903")
						else
							warnmessage("ENTITIES", inst.Name:gsub("Moving","").." is coming.", "Hide!", 0, "0", inst)
						end
						--inst.Destroying:Wait()
						--warnmessage("ENTITIES", "It's now completely safe to leave the hiding spot.", 7)
						--	end
					end
				end
			end
		end)
			--[[if flags.avoidrushambush == true then
		if inst.Name == "RushMoving" or inst.Name == "AmbushMoving" then
			repeat task.wait() until plr:DistanceFromCharacter(inst:GetPivot().Position) < 400 or not inst:IsDescendantOf(workspace)

			if inst:IsDescendantOf(workspace) then
				if inst.Name:gsub("Moving","") == "Rush" then
					warnmessage("ENTITIES", "Avoiding "..inst.Name:gsub("Moving",""), "Please wait...", 0, "11102256553", inst)
				elseif inst.Name:gsub("Moving","") == "Ambush" then
					warnmessage("ENTITIES", "Avoiding "..inst.Name:gsub("Moving",""), "Please wait...", 0, "10938726652", inst)
				else
					warnmessage("ENTITIES", "Avoiding "..inst.Name:gsub("Moving",""), "Please wait...", 0, "0", inst)
				end

				local OldPos = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
				local oldwalkspeed = hum.WalkSpeed
				
				local pos = CFrame.new(
					OldPos + Vector3.new(
						0,
						avoidingYvalue,
						0
					) 
				)
				
				local function getrecentroom(index)
					local rooms = workspace.CurrentRooms:GetChildren() 
					table.sort(rooms,function(a,b)
						return tonumber(a.Name) > tonumber(b.Name) 
					end)

					return rooms[index]
				end
				local room = getrecentroom(2)
				local door = room:WaitForChild("Door")

				local CFrameValue = Instance.new("CFrameValue")
				CFrameValue.Value = game.Players.LocalPlayer.Character:GetPivot()
				CFrameValue:GetPropertyChangedSignal("Value"):connect(function()
					--game.Players.LocalPlayer.Character:PivotTo(CFrameValue.Value)
					game.Players.LocalPlayer.Character.Collision.CFrame = CFrameValue.Value
				end)
				local tween = game:GetService("TweenService"):Create(CFrameValue, TweenInfo.new(1.5), {
					Value = pos
				})
				tween:Play()

				local con
				tween.Completed:connect(function()
					CFrameValue:Destroy() 
					con = game:GetService("RunService").RenderStepped:Connect(function()
						--game.Players.LocalPlayer.Character:PivotTo(pos)
						game.Players.LocalPlayer.Character.Collision.CFrame = pos
					end)
				end)

				inst.Destroying:Wait()
				con:Disconnect()

				local CFrameValue = Instance.new("CFrameValue")
				CFrameValue.Value = game.Players.LocalPlayer.Character:GetPivot()
				CFrameValue:GetPropertyChangedSignal("Value"):connect(function()
					game.Players.LocalPlayer.Character:PivotTo(CFrameValue.Value)
				end)
				local tween = game:GetService("TweenService"):Create(CFrameValue, TweenInfo.new(1.5), {Value = CFrame.new(OldPos)})
				tween:Play()
				tween.Completed:connect(function()
					CFrameValue:Destroy() 
					--game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = false
				end)
			end
		end
	end--]]
	end)
	local Section = MainTab:CreateSection("Rooms (DOORS)")
	local noseekarmsfirebtn = MainTab:CreateToggle({
		Name = "No Seek Arms & Fire",
		CurrentValue = false,
		Flag = "nofire", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(val, oldval)
			flags.noseekarmsfire = val
		end,
	})
	game:GetService("ReplicatedStorage").GameData.LatestRoom:GetPropertyChangedSignal("Value"):Connect(function()
		task.wait(.1)
		for _,descendant in pairs(game:GetService("Workspace").CurrentRooms:GetDescendants()) do
			if descendant.Name == "Seek_Arm" or descendant.Name == "ChandelierObstruction" then
				descendant.Parent = nil
				descendant:Destroy()
			end
		end
	end)
	buttons.noseekarmsfire = noseekarmsfirebtn

	local Label = MainTab:CreateLabel("Press this only if you have the\nbreaker box minigame on.")
	local Section = MainTab:CreateSection("Interactables")
	if fireproximityprompt then
		local draweraurabtn = MainTab:CreateToggle({
			Name = "Loot Aura",
			CurrentValue = false,
			Flag = "Lootura", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
			Callback = function(val, oldval)
				flags.draweraura = val

				if val then
					local function setup(room)
						local function check(v)
							task.wait()
							if v:IsA("Model") then
								--	if v.PrimaryPart then
								task.wait()
								if v.Name == "DrawerContainer" or v.Name == "RolltopContainer" then
									if v.Name == "RolltopContainer" then
										local prompt = v:WaitForChild("ActivateEventPrompt")
										local interactions = prompt:GetAttribute("Interactions")

										if not interactions then
											task.spawn(function()
												repeat task.wait(0.1)
													--pcall(function()
													local posok = false
													pcall(function()
														local posoks, posoke = pcall(function()
															posok = (plr:DistanceFromCharacter(v.PrimaryPart.Position) <= 12)
														end)
														if posoke then
															local part
															for _,v in pairs(v:GetChildren()) do
																local hasProperty = pcall(function() local t = v["Position"] end)
																if hasProperty then
																	part = v
																	break
																end
															end
															posok = (plr:DistanceFromCharacter(part.Position) <= 12)
														end
													end)
													if posok then
														fireproximityprompt(prompt)
													end
													--end)
												until prompt:GetAttribute("Interactions") or not flags.draweraura
											end)
										end
									else
										local knob = v:WaitForChild("Knobs")

										if knob then
											local prompt = knob:WaitForChild("ActivateEventPrompt")
											local interactions = prompt:GetAttribute("Interactions")

											if not interactions then
												task.spawn(function()
													repeat task.wait(0.1)
														--pcall(function()
														local posok = false
														pcall(function()
															local posoks, posoke = pcall(function()
																posok = (plr:DistanceFromCharacter(v.PrimaryPart.Position) <= 12)
															end)
															if posoke then
																local part
																for _,v in pairs(v:GetChildren()) do
																	local hasProperty = pcall(function() local t = v["Position"] end)
																	if hasProperty then
																		part = v
																		break
																	end
																end
																posok = (plr:DistanceFromCharacter(part.Position) <= 12)
															end
														end)
														if posok then
															fireproximityprompt(prompt)
														end
														--end)
													until prompt:GetAttribute("Interactions") or not flags.draweraura
												end)
											end
										end
									end
								elseif v.Name == "KeyObtain" or v.Name == "ElectricalKeyObtain" then
									local prompt = v:WaitForChild("ModulePrompt")
									local interactions = prompt:GetAttribute("Interactions")

									if not interactions then
										task.spawn(function()
											repeat task.wait(0.1)
												--pcall(function()
												local posok = false
												pcall(function()
													local posoks, posoke = pcall(function()
														posok = (plr:DistanceFromCharacter(v.PrimaryPart.Position) <= 12)
													end)
													if posoke then
														local part
														for _,v in pairs(v:GetChildren()) do
															local hasProperty = pcall(function() local t = v["Position"] end)
															if hasProperty then
																part = v
																break
															end
														end
														posok = (plr:DistanceFromCharacter(part.Position) <= 12)
													end
												end)
												if posok then
													fireproximityprompt(prompt) 
												end
												--end)
											until prompt:GetAttribute("Interactions") or not flags.draweraura
										end)
									end
								elseif v.Name == "Green_Herb" then
									local plant = v:WaitForChild("Plant")

									if plant then
										local prompt = plant:WaitForChild("HerbPrompt")
										local okcanckl = 0
										task.spawn(function()
											repeat task.wait(0.1)
												--pcall(function()
												local posok = false
												pcall(function()
													local posoks, posoke = pcall(function()
														posok = (plr:DistanceFromCharacter(v.PrimaryPart.Position) <= 12)
													end)
													if posoke then
														local part
														for _,v in pairs(v:GetChildren()) do
															local hasProperty = pcall(function() local t = v["Position"] end)
															if hasProperty then
																part = v
																break
															end
														end
														posok = (plr:DistanceFromCharacter(part.Position) <= 12)
													end
												end)
												if posok then
													fireproximityprompt(prompt) 
													okcanckl += 1
												end 
												--end)
											until prompt:GetAttribute("Interactions") or not flags.draweraura or okcanckl > 35
										end)
									end
								elseif v.Name == "PickupItem" then
									if game:GetService("ReplicatedStorage").GameData.LatestRoom.Value == 51 or game:GetService("ReplicatedStorage").GameData.LatestRoom.Value == 52 then
										return
									end

									local prompt = v:WaitForChild("ModulePrompt")
									local okcanckl = 0
									task.spawn(function()
										repeat task.wait(0.1)
											--pcall(function()
											local posok = false
											pcall(function()
												local posoks, posoke = pcall(function()
													posok = (plr:DistanceFromCharacter(v.PrimaryPart.Position) <= 12)
												end)
												if posoke then
													local part
													for _,v in pairs(v:GetChildren()) do
														local hasProperty = pcall(function() local t = v["Position"] end)
														if hasProperty then
															part = v
															break
														end
													end
													posok = (plr:DistanceFromCharacter(part.Position) <= 12)
												end
											end)
											if posok then
												fireproximityprompt(prompt) 
												okcanckl += 1
											end
											--end)
										until not v:IsDescendantOf(workspace) or not prompt:IsDescendantOf(workspace) or not flags.draweraura or okcanckl > 20
									end)
								elseif v:GetAttribute("Pickup") or v:GetAttribute("PropType") then
									if game:GetService("ReplicatedStorage").GameData.LatestRoom.Value == 51 or game:GetService("ReplicatedStorage").GameData.LatestRoom.Value == 52 then
										return
									end

									local prompt = v:WaitForChild("ModulePrompt", 2)
									if prompt == nil then
										prompt = v:FindFirstChildWhichIsA("ProximityPrompt")
										if prompt == nil then
											for _,vvvvv in pairs(v:GetDescendants()) do
												if vvvvv:IsA("ProximityPrompt") then
													prompt = vvvvv
													break
												end
											end
										end
									end

									task.spawn(function()
										repeat task.wait(0.1)
											--pcall(function()
											local posok = false
											pcall(function()
												local posoks, posoke = pcall(function()
													posok = (plr:DistanceFromCharacter(v.PrimaryPart.Position) <= 12)
												end)
												if posoke then
													local part
													for _,v in pairs(v:GetChildren()) do
														local hasProperty = pcall(function() local t = v["Position"] end)
														if hasProperty then
															part = v
															break
														end
													end
													posok = (plr:DistanceFromCharacter(part.Position) <= 12)
												end
											end)
											if posok then
												fireproximityprompt(prompt) 
											end
											--end)
										until not v:IsDescendantOf(workspace) or not prompt:IsDescendantOf(workspace) or not flags.draweraura
									end)
								elseif v.Name == "GoldPile" then
									local prompt = v:WaitForChild("LootPrompt")
									local interactions = prompt:GetAttribute("Interactions")

									if not interactions then
										task.spawn(function()
											repeat task.wait(0.1)
												--pcall(function()
												local posok = false
												pcall(function()
													local posoks, posoke = pcall(function()
														posok = (plr:DistanceFromCharacter(v.PrimaryPart.Position) <= 12)
													end)
													if posoke then
														local part
														for _,v in pairs(v:GetChildren()) do
															local hasProperty = pcall(function() local t = v["Position"] end)
															if hasProperty then
																part = v
																break
															end
														end
														posok = (plr:DistanceFromCharacter(part.Position) <= 12)
													end
												end)
												if posok then
													fireproximityprompt(prompt) 
												end 
												--end)
											until prompt:GetAttribute("Interactions") or not flags.draweraura
										end)
									end
								elseif v.Name:sub(1,8) == "ChestBox" then
									local prompt = v:WaitForChild("ActivateEventPrompt")
									local interactions = prompt:GetAttribute("Interactions")

									if not interactions then
										task.spawn(function()
											repeat task.wait(0.1)
												--pcall(function()
												local posok = false
												pcall(function()
													local posoks, posoke = pcall(function()
														posok = (plr:DistanceFromCharacter(v.PrimaryPart.Position) <= 12)
													end)
													if posoke then
														local part
														for _,v in pairs(v:GetChildren()) do
															local hasProperty = pcall(function() local t = v["Position"] end)
															if hasProperty then
																part = v
																break
															end
														end
														posok = (plr:DistanceFromCharacter(part.Position) <= 12)
													end
												end)
												if posok then
													fireproximityprompt(prompt)
												end
												--end)
											until prompt:GetAttribute("Interactions") or not flags.draweraura
										end)
									end
								elseif v.Name == "RolltopContainer" then
									local prompt = v:WaitForChild("ActivateEventPrompt")
									local interactions = prompt:GetAttribute("Interactions")

									if not interactions then
										task.spawn(function()
											repeat task.wait(0.1)
												--pcall(function()
												local posok = false
												pcall(function()
													local posoks, posoke = pcall(function()
														posok = (plr:DistanceFromCharacter(v.PrimaryPart.Position) <= 12)
													end)
													if posoke then
														local part
														for _,v in pairs(v:GetChildren()) do
															local hasProperty = pcall(function() local t = v["Position"] end)
															if hasProperty then
																part = v
																break
															end
														end
														posok = (plr:DistanceFromCharacter(part.Position) <= 12)
													end
												end)
												if posok then
													fireproximityprompt(prompt)
												end
												--end)
											until prompt:GetAttribute("Interactions") or not flags.draweraura
										end)
									end
								end 
								--end
							end
						end

						local subaddcon
						subaddcon = room.DescendantAdded:Connect(function(ve)
							check(ve) 
						end)

						for _,v in pairs(room:GetDescendants()) do
							task.spawn(function()
								check(v)
							end)
						end

						task.spawn(function()
							repeat task.wait() until not flags.draweraura
							subaddcon:Disconnect() 
						end)
					end

					local addconnect
					addconnect = workspace.CurrentRooms.ChildAdded:Connect(function(room)
						setup(room)
					end)

					for i,room in pairs(workspace.CurrentRooms:GetChildren()) do
						if room:FindFirstChild("Assets") then
							setup(room) 
						end
					end
					setup(workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)])

					repeat task.wait() until MAXEDLOADED == false or not flags.draweraura
					addconnect:Disconnect()
				end
			end,
		})
		buttons.draweraura = draweraurabtn
	else
		oldwarnmessage("Maxed v"..currentver, "You need to have fireproximityprompt function for 'loot aura'.", 7)

	end

	if fireproximityprompt then
		local bookcollecterbtn = MainTab:CreateToggle({
			Name = "Book Aura",
			CurrentValue = false,
			Flag = "bookaura", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
			Callback = function(val, oldval)
				flags.bookcollecter = val

				if val then
					local function setup(room)
						local function check(v)
							if v:IsA("Model") then
								--if v.PrimaryPart then
								if v.Name == "LiveHintBook" then
									local prompt = v:WaitForChild("ActivateEventPrompt")

									local okcanckl = 0
									task.spawn(function()
										repeat task.wait(0.1)
											local posok = false
											pcall(function()
												local posoks, posoke = pcall(function()
													posok = (plr:DistanceFromCharacter(v.PrimaryPart.Position) <= 12)
												end)
												if posoke then
													local part
													for _,v in pairs(v:GetChildren()) do
														local hasProperty = pcall(function() local t = v["Position"] end)
														if hasProperty then
															part = v
															break
														end
													end
													posok = (plr:DistanceFromCharacter(part.Position) <= 12)
												end
											end)
											if posok then
												fireproximityprompt(prompt) 
												okcanckl += 1
											end
										until not v:IsDescendantOf(workspace) or not prompt:IsDescendantOf(workspace) or not flags.bookcollecter or okcanckl > 50
									end)
								end
								--end
							end

						end

						local subaddcon
						subaddcon = room.DescendantAdded:Connect(function(v)
							check(v) 
						end)

						for i,v in pairs(room:GetDescendants()) do
							check(v)
						end

						task.spawn(function()
							repeat task.wait() until MAXEDLOADED == false or not flags.bookcollecter
							subaddcon:Disconnect() 
						end)
					end

					repeat task.wait()if flags.bookcollecter == false then break end until game:GetService("ReplicatedStorage").GameData.LatestRoom.Value == 50

					if flags.bookcollecter == true then
						local addconnect
						addconnect = workspace.CurrentRooms.ChildAdded:Connect(function(room)
							setup(room)
						end)

						for i,room in pairs(workspace.CurrentRooms:GetChildren()) do
							if room:FindFirstChild("Assets") then
								setup(room) 
							end
						end
						--	if workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:FindFirstChild("Assets") then
						setup(workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)])
						--	end

						repeat task.wait() until not flags.bookcollecter
						addconnect:Disconnect()
					end
				end
			end,
		})
		buttons.bookcollecter = bookcollecterbtn
	else
		oldwarnmessage("Maxed v"..currentver, "You need to have fireproximityprompt function for 'book aura'.", 7)

	end
	if fireproximityprompt then
		local breakercollecterbtn = MainTab:CreateToggle({
			Name = "Breaker Aura",
			CurrentValue = false,
			Flag = "breakeraura", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
			Callback = function(val, oldval)
				flags.breakercollecter = val

				if val then
					local function setup(room)
						local function check(v)
							if v:IsA("Model") then
								--if v.PrimaryPart then
								if v.Name == "LiveBreakerPolePickup" then
									local prompt = v:WaitForChild("ActivateEventPrompt")

									local okcanckl = 0
									task.spawn(function()
										repeat task.wait(0.1)
											local posok = false
											pcall(function()
												local posoks, posoke = pcall(function()
													posok = (plr:DistanceFromCharacter(v.PrimaryPart.Position) <= 12)
												end)
												if posoke then
													local part
													for _,v in pairs(v:GetChildren()) do
														local hasProperty = pcall(function() local t = v["Position"] end)
														if hasProperty then
															part = v
															break
														end
													end
													posok = (plr:DistanceFromCharacter(part.Position) <= 12)
												end
											end)
											if posok then
												fireproximityprompt(prompt) 
												okcanckl += 1
											end
										until not v:IsDescendantOf(workspace) or not prompt:IsDescendantOf(workspace) or not flags.breakercollecter or okcanckl > 50
									end)
								end
								--end
							end

						end

						local subaddcon
						subaddcon = room.DescendantAdded:Connect(function(v)
							check(v) 
						end)

						for i,v in pairs(room:GetDescendants()) do
							check(v)
						end

						task.spawn(function()
							repeat task.wait() until MAXEDLOADED == false or not flags.breakercollecter
							subaddcon:Disconnect() 
						end)
					end

					repeat task.wait()if flags.breakercollecter == false then break end until game:GetService("ReplicatedStorage").GameData.LatestRoom.Value == 100

					if flags.breakercollecter == true then
						local addconnect
						addconnect = workspace.CurrentRooms.ChildAdded:Connect(function(room)
							setup(room)
						end)

						for i,room in pairs(workspace.CurrentRooms:GetChildren()) do
							if room:FindFirstChild("Assets") then
								setup(room) 
							end
						end
						--	if workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:FindFirstChild("Assets") then
						setup(workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)])
						--	end

						repeat task.wait() until MAXEDLOADED == false or not flags.breakercollecter
						addconnect:Disconnect()
					end
				end
			end,
		})
		buttons.breakercollecter = breakercollecterbtn
	else 
		oldwarnmessage("Maxed v"..currentver, "You need to have fireproximityprompt function for 'book aura'.", 7)

	end
	if fireproximityprompt then
		local autopullleverbtn = MainTab:CreateToggle({
			Name = "Lever Aura",
			CurrentValue = false,
			Flag = "leveraura", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
			Callback = function(val, oldval)
				flags.autopulllever = val

				if val then
					local function setup(room)
						local function check(v)
							--if v:IsA("Model") then
							--	if v.PrimaryPart then
							if v.Name == "LeverForGate" then
								local prompt = v:WaitForChild("ActivateEventPrompt")

								local okcanckl = 0
								pcall(function() v.PrimaryPart:WaitForChild("SoundToPlay").Played:Connect(function() okcanckl = 100 end) end)
								task.spawn(function()
									repeat task.wait(0.1)
										local posok = false
										pcall(function()
											local posoks, posoke = pcall(function()
												posok = (plr:DistanceFromCharacter(v.PrimaryPart.Position) <= 12)
											end)
											if posoke then
												local part
												for _,v in pairs(v:GetChildren()) do
													local hasProperty = pcall(function() local t = v["Position"] end)
													if hasProperty then
														part = v
														break
													end
												end
												posok = (plr:DistanceFromCharacter(part.Position) <= 12)
											end
										end)
										if posok then
											fireproximityprompt(prompt) 
											okcanckl += 1
										end
									until not v:IsDescendantOf(workspace) or not prompt:IsDescendantOf(workspace) or not flags.autopulllever or okcanckl > 50
								end)
							end
							--	end
							--endd

						end

						local subaddcon
						subaddcon = room.DescendantAdded:Connect(function(v)
							check(v) 
						end)

						for i,v in pairs(room:GetDescendants()) do
							check(v)
						end

						task.spawn(function()
							repeat task.wait() until MAXEDLOADED == false or not flags.autopulllever
							subaddcon:Disconnect() 
						end)
					end

					if flags.autopulllever == true then
						local addconnect
						addconnect = workspace.CurrentRooms.ChildAdded:Connect(function(room)
							setup(room)
						end)

						for i,room in pairs(workspace.CurrentRooms:GetChildren()) do
							if room:FindFirstChild("Assets") then
								setup(room) 
							end
						end
						--	if workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:FindFirstChild("Assets") then
						setup(workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)])
						--	end

						repeat task.wait() until MAXEDLOADED == false or not flags.autopulllever
						addconnect:Disconnect()
					end
				end
			end,
		})
		buttons.autopulllever = autopullleverbtn
	else
		oldwarnmessage("Maxed v"..currentver, "You need to have fireproximityprompt function for 'lever aura'.", 7)


		pcall(function() getgenv().MAXEDLOADED = false;MAXEDLOADED = false end)
	end
	end


	if  game.PlaceId == 6516141723 then 
	local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Rayfield/main/source'))()

	local Window = Rayfield:CreateWindow({
		Name = "MAXED",
		LoadingTitle = "MAXED",
		LoadingSubtitle = "by Gambol",
		ConfigurationSaving = {
			Enabled = true,
		},
		Discord = {
			Enabled = false,
			Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD.
			RememberJoins = true -- Set this to false to make them join the discord every time they load it up
		},
		KeySystem = false, -- Set this to true to use our key system
		KeySettings = {
			Title = "MAXED",
			Subtitle = "Key System",
			Note = "Join the discord (discord.gg/sirius)",
			FileName = "SiriusKey",
			SaveKey = true,
			GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
			Key = "Hello"
		}
	})
	
	local retab = Window:CreateTab("Main", 4483362458) -- Title, Image

	local Button = retab:CreateButton({
		Name = "Join Solo",
		Callback = function()
			local NotificationHolder = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Module.Lua"))()
			local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Client.Lua"))()
			function message(text)
				task.spawn(function()
					local notif = Instance.new("Sound");notif.Parent = game.SoundService;notif.SoundId = "rbxassetid://4590657391";notif.Volume = 3;notif:Play();notif.Stopped:Wait();notif:Destroy()
				end)

				task.spawn(function()
					local msg = Instance.new("Message",workspace)
					msg.Text = tostring(text)
					task.wait(5)
					msg:Destroy()
				end)
			end

			function normalmessage(title, text, timee)
				task.spawn(function()
					local notif = Instance.new("Sound");notif.Parent = game.SoundService;notif.SoundId = "rbxassetid://4590657391";notif.Volume = 3;notif:Play();notif.Stopped:Wait();notif:Destroy()
				end)

				Notification:Notify(
					{Title = title, Description = text},
					{OutlineColor = Color3.fromRGB(80, 80, 80),Time = timee or 5, Type = "default"}
				)
			end

			function confirmnotification(title, text, timee, callback)
				task.spawn(function()
					local notif = Instance.new("Sound");notif.Parent = game.SoundService;notif.SoundId = "rbxassetid://4590657391";notif.Volume = 3;notif:Play();notif.Stopped:Wait();notif:Destroy()
				end)

				Notification:Notify(
					{Title = title, Description = text},
					{OutlineColor = Color3.fromRGB(80, 80, 80), Time = timee or 10, Type = "option"},
					{Image = "http://www.roblox.com/asset/?id=6023426923", ImageColor = Color3.fromRGB(255, 84, 84), Callback = callback or function(state)end}
				)
			end 

			function warnmessage(title, text, timee)
				task.spawn(function()
					local notif = Instance.new("Sound");notif.Parent = game.SoundService;notif.SoundId = "rbxassetid://4590657391";notif.Volume = 5;notif:Play();notif.Stopped:Wait();notif:Destroy()
				end)
				Notification:Notify(
					{Title = title, Description = text},
					{OutlineColor = Color3.fromRGB(80, 80, 80),Time = timee or 5, Type = "image"},
					{Image = "http://www.roblox.com/asset/?id=6023426923", ImageColor = Color3.fromRGB(255, 84, 84)}
				)
			end

			local teleported = false
			repeat
				for _,v in pairs(game:GetService("Workspace").Lobby.LobbyElevators:GetChildren()) do
					if v:FindFirstChild("DoorHitbox") then
						if v.DoorHitbox:FindFirstChild("BillboardGui") then
							if v.DoorHitbox.BillboardGui:FindFirstChild("Title") then
								if not v.DoorHitbox.BillboardGui:FindFirstChild("Warning") then
									if v.DoorHitbox.BillboardGui.Title.Text == "0 / 1" or v.DoorHitbox.BillboardGui.Title.Text == "0 / 12" then
										repeat
											game.Players.LocalPlayer.Character:PivotTo(v.DoorHitbox.CFrame)
											task.wait()
										until v.DoorHitbox.BillboardGui.Players:FindFirstChild(game.Players.LocalPlayer.DisplayName) or v.DoorHitbox.BillboardGui.Players:FindFirstChild(game.Players.LocalPlayer.Name) --v.DoorHitbox.BillboardGui.Title.Text == "1 / 1" or v.DoorHitbox.BillboardGui.Title.Text == "1 / 12"
										teleported = true
										break
									end
								end
							end
						end
					end
				end
				task.wait(1)
				if teleported == false then
					normalmessage("MAXED", "Solo elevators are full, retrying...", 2)
				end
			until teleported == true
			normalmessage("MAXED", "Joining...", 10)		end,
	})
	local Button = retab:CreateButton({
		Name = "Join Duo",
		Callback = function()
			local NotificationHolder = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Module.Lua"))()
			local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Client.Lua"))()
			function message(text)
				task.spawn(function()
					local notif = Instance.new("Sound");notif.Parent = game.SoundService;notif.SoundId = "rbxassetid://4590657391";notif.Volume = 3;notif:Play();notif.Stopped:Wait();notif:Destroy()
				end)

				task.spawn(function()
					local msg = Instance.new("Message",workspace)
					msg.Text = tostring(text)
					task.wait(5)
					msg:Destroy()
				end)
			end

			function normalmessage(title, text, timee)
				task.spawn(function()
					local notif = Instance.new("Sound");notif.Parent = game.SoundService;notif.SoundId = "rbxassetid://4590657391";notif.Volume = 3;notif:Play();notif.Stopped:Wait();notif:Destroy()
				end)

				Notification:Notify(
					{Title = title, Description = text},
					{OutlineColor = Color3.fromRGB(80, 80, 80),Time = timee or 5, Type = "default"}
				)
			end

			function confirmnotification(title, text, timee, callback)
				task.spawn(function()
					local notif = Instance.new("Sound");notif.Parent = game.SoundService;notif.SoundId = "rbxassetid://4590657391";notif.Volume = 3;notif:Play();notif.Stopped:Wait();notif:Destroy()
				end)

				Notification:Notify(
					{Title = title, Description = text},
					{OutlineColor = Color3.fromRGB(80, 80, 80), Time = timee or 10, Type = "option"},
					{Image = "http://www.roblox.com/asset/?id=6023426923", ImageColor = Color3.fromRGB(255, 84, 84), Callback = callback or function(state)end}
				)
			end 

			function warnmessage(title, text, timee)
				task.spawn(function()
					local notif = Instance.new("Sound");notif.Parent = game.SoundService;notif.SoundId = "rbxassetid://4590657391";notif.Volume = 5;notif:Play();notif.Stopped:Wait();notif:Destroy()
				end)
				Notification:Notify(
					{Title = title, Description = text},
					{OutlineColor = Color3.fromRGB(80, 80, 80),Time = timee or 5, Type = "image"},
					{Image = "http://www.roblox.com/asset/?id=6023426923", ImageColor = Color3.fromRGB(255, 84, 84)}
				)
			end

			local teleported = false
			repeat
				for _,v in pairs(game:GetService("Workspace").Lobby.LobbyElevators:GetChildren()) do
					if v:FindFirstChild("DoorHitbox") then
						if v.DoorHitbox:FindFirstChild("BillboardGui") then
							if v.DoorHitbox.BillboardGui:FindFirstChild("Title") then
								if not v.DoorHitbox.BillboardGui:FindFirstChild("Warning") then
									if v.DoorHitbox.BillboardGui.Title.Text == "0 / 2" or v.DoorHitbox.BillboardGui.Title.Text == "0 / 12" then
										repeat
											game.Players.LocalPlayer.Character:PivotTo(v.DoorHitbox.CFrame)
											task.wait()
										until v.DoorHitbox.BillboardGui.Players:FindFirstChild(game.Players.LocalPlayer.DisplayName) or v.DoorHitbox.BillboardGui.Players:FindFirstChild(game.Players.LocalPlayer.Name) --v.DoorHitbox.BillboardGui.Title.Text == "1 / 1" or v.DoorHitbox.BillboardGui.Title.Text == "1 / 12"
										teleported = true
										break
									end
								end
							end
						end
					end
				end
				task.wait(1)
				if teleported == false then
					normalmessage("MAXED", "Duo elevators are full, retrying...", 2)
				end
			until teleported == true
			normalmessage("MAXED", "Joining...", 10)		end,
	})

	local Button = retab:CreateButton({
		Name = "Join Squad",
		Callback = function()
			local NotificationHolder = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Module.Lua"))()
			local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Client.Lua"))()
			function message(text)
				task.spawn(function()
					local notif = Instance.new("Sound");notif.Parent = game.SoundService;notif.SoundId = "rbxassetid://4590657391";notif.Volume = 3;notif:Play();notif.Stopped:Wait();notif:Destroy()
				end)

				task.spawn(function()
					local msg = Instance.new("Message",workspace)
					msg.Text = tostring(text)
					task.wait(5)
					msg:Destroy()
				end)
			end

			function normalmessage(title, text, timee)
				task.spawn(function()
					local notif = Instance.new("Sound");notif.Parent = game.SoundService;notif.SoundId = "rbxassetid://4590657391";notif.Volume = 3;notif:Play();notif.Stopped:Wait();notif:Destroy()
				end)

				Notification:Notify(
					{Title = title, Description = text},
					{OutlineColor = Color3.fromRGB(80, 80, 80),Time = timee or 5, Type = "default"}
				)
			end

			function confirmnotification(title, text, timee, callback)
				task.spawn(function()
					local notif = Instance.new("Sound");notif.Parent = game.SoundService;notif.SoundId = "rbxassetid://4590657391";notif.Volume = 3;notif:Play();notif.Stopped:Wait();notif:Destroy()
				end)

				Notification:Notify(
					{Title = title, Description = text},
					{OutlineColor = Color3.fromRGB(80, 80, 80), Time = timee or 10, Type = "option"},
					{Image = "http://www.roblox.com/asset/?id=6023426923", ImageColor = Color3.fromRGB(255, 84, 84), Callback = callback or function(state)end}
				)
			end 

			function warnmessage(title, text, timee)
				task.spawn(function()
					local notif = Instance.new("Sound");notif.Parent = game.SoundService;notif.SoundId = "rbxassetid://4590657391";notif.Volume = 5;notif:Play();notif.Stopped:Wait();notif:Destroy()
				end)
				Notification:Notify(
					{Title = title, Description = text},
					{OutlineColor = Color3.fromRGB(80, 80, 80),Time = timee or 5, Type = "image"},
					{Image = "http://www.roblox.com/asset/?id=6023426923", ImageColor = Color3.fromRGB(255, 84, 84)}
				)
			end

			local teleported = false
			repeat
				for _,v in pairs(game:GetService("Workspace").Lobby.LobbyElevators:GetChildren()) do
					if v:FindFirstChild("DoorHitbox") then
						if v.DoorHitbox:FindFirstChild("BillboardGui") then
							if v.DoorHitbox.BillboardGui:FindFirstChild("Title") then
								if not v.DoorHitbox.BillboardGui:FindFirstChild("Warning") then
									if v.DoorHitbox.BillboardGui.Title.Text == "0 / 4" or v.DoorHitbox.BillboardGui.Title.Text == "0 / 12" then
										repeat
											game.Players.LocalPlayer.Character:PivotTo(v.DoorHitbox.CFrame)
											task.wait()
										until v.DoorHitbox.BillboardGui.Players:FindFirstChild(game.Players.LocalPlayer.DisplayName) or v.DoorHitbox.BillboardGui.Players:FindFirstChild(game.Players.LocalPlayer.Name) --v.DoorHitbox.BillboardGui.Title.Text == "1 / 1" or v.DoorHitbox.BillboardGui.Title.Text == "1 / 12"
										teleported = true
										break
									end
								end
							end
						end
					end
				end
				task.wait(1)
				if teleported == false then
					normalmessage("MAXED", "Squad elevators are full, retrying...", 2)
				end
			until teleported == true
			normalmessage("MAXED", "Joining...", 10)		end,
	})

	local Button = retab:CreateButton({
		Name = "Join Super Hard Mode",
		Callback = function()
			local NotificationHolder = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Module.Lua"))()
			local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Client.Lua"))()
			function message(text)
				task.spawn(function()
					local notif = Instance.new("Sound");notif.Parent = game.SoundService;notif.SoundId = "rbxassetid://4590657391";notif.Volume = 3;notif:Play();notif.Stopped:Wait();notif:Destroy()
				end)

				task.spawn(function()
					local msg = Instance.new("Message",workspace)
					msg.Text = tostring(text)
					task.wait(5)
					msg:Destroy()
				end)
			end

			function normalmessage(title, text, timee)
				task.spawn(function()
					local notif = Instance.new("Sound");notif.Parent = game.SoundService;notif.SoundId = "rbxassetid://4590657391";notif.Volume = 3;notif:Play();notif.Stopped:Wait();notif:Destroy()
				end)

				Notification:Notify(
					{Title = title, Description = text},
					{OutlineColor = Color3.fromRGB(80, 80, 80),Time = timee or 5, Type = "default"}
				)
			end

			function confirmnotification(title, text, timee, callback)
				task.spawn(function()
					local notif = Instance.new("Sound");notif.Parent = game.SoundService;notif.SoundId = "rbxassetid://4590657391";notif.Volume = 3;notif:Play();notif.Stopped:Wait();notif:Destroy()
				end)

				Notification:Notify(
					{Title = title, Description = text},
					{OutlineColor = Color3.fromRGB(80, 80, 80), Time = timee or 10, Type = "option"},
					{Image = "http://www.roblox.com/asset/?id=6023426923", ImageColor = Color3.fromRGB(255, 84, 84), Callback = callback or function(state)end}
				)
			end 

			function warnmessage(title, text, timee)
				task.spawn(function()
					local notif = Instance.new("Sound");notif.Parent = game.SoundService;notif.SoundId = "rbxassetid://4590657391";notif.Volume = 5;notif:Play();notif.Stopped:Wait();notif:Destroy()
				end)
				Notification:Notify(
					{Title = title, Description = text},
					{OutlineColor = Color3.fromRGB(80, 80, 80),Time = timee or 5, Type = "image"},
					{Image = "http://www.roblox.com/asset/?id=6023426923", ImageColor = Color3.fromRGB(255, 84, 84)}
				)
			end

			local teleported = false
			repeat
				for _,v in pairs(game:GetService("Workspace").Lobby.LobbyElevators:GetChildren()) do
					if v:FindFirstChild("DoorHitbox") then
						if v.DoorHitbox:FindFirstChild("BillboardGui") then
							if v.DoorHitbox.BillboardGui:FindFirstChild("Title") then
								if v.DoorHitbox.BillboardGui:FindFirstChild("Warning") then
									if v.DoorHitbox.BillboardGui.Warning.Text == "SUPER HARD MODE!!!" and (v.DoorHitbox.BillboardGui.Title.Text == "0 / 1" or v.DoorHitbox.BillboardGui.Title.Text == "0 / 12") then
										repeat
											game.Players.LocalPlayer.Character:PivotTo(v.DoorHitbox.CFrame)
											task.wait()
										until v.DoorHitbox.BillboardGui.Players:FindFirstChild(game.Players.LocalPlayer.DisplayName) or v.DoorHitbox.BillboardGui.Players:FindFirstChild(game.Players.LocalPlayer.Name) --v.DoorHitbox.BillboardGui.Title.Text == "1 / 1" or v.DoorHitbox.BillboardGui.Title.Text == "1 / 12"
										teleported = true
										break
									end
								end
							end
						end
					end
				end
				task.wait(1)
				if teleported == false then
					normalmessage("MAXED", "SUPER HARD MODE elevator are full, retrying...", 2)
				end
			until teleported == true
			normalmessage("MAXED", "Joining...", 10)		end,
	})


end









	
	
	
